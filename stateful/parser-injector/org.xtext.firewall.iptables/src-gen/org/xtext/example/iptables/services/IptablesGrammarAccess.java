/*
* generated by Xtext
*/

package org.xtext.example.iptables.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class IptablesGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cRulesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRulesRuleParserRuleCall_0 = (RuleCall)cRulesAssignment.eContents().get(0);
		
		//Model:
		//	rules+=Rule*;
		public ParserRule getRule() { return rule; }

		//rules+=Rule*
		public Assignment getRulesAssignment() { return cRulesAssignment; }

		//Rule
		public RuleCall getRulesRuleParserRuleCall_0() { return cRulesRuleParserRuleCall_0; }
	}

	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cDeclarationAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cDeclarationChainDeclarationParserRuleCall_0_0 = (RuleCall)cDeclarationAssignment_0.eContents().get(0);
		private final Assignment cFilterAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cFilterFilterDeclarationParserRuleCall_1_0 = (RuleCall)cFilterAssignment_1.eContents().get(0);
		
		//Rule:
		//	declaration=ChainDeclaration | filter=FilterDeclaration;
		public ParserRule getRule() { return rule; }

		//declaration=ChainDeclaration | filter=FilterDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//declaration=ChainDeclaration
		public Assignment getDeclarationAssignment_0() { return cDeclarationAssignment_0; }

		//ChainDeclaration
		public RuleCall getDeclarationChainDeclarationParserRuleCall_0_0() { return cDeclarationChainDeclarationParserRuleCall_0_0; }

		//filter=FilterDeclaration
		public Assignment getFilterAssignment_1() { return cFilterAssignment_1; }

		//FilterDeclaration
		public RuleCall getFilterFilterDeclarationParserRuleCall_1_0() { return cFilterFilterDeclarationParserRuleCall_1_0; }
	}

	public class FilterDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FilterDeclaration");
		private final Assignment cFilterAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cFilterFilteringSpecParserRuleCall_0 = (RuleCall)cFilterAssignment.eContents().get(0);
		
		//FilterDeclaration:
		//	filter=FilteringSpec;
		public ParserRule getRule() { return rule; }

		//filter=FilteringSpec
		public Assignment getFilterAssignment() { return cFilterAssignment; }

		//FilteringSpec
		public RuleCall getFilterFilteringSpecParserRuleCall_0() { return cFilterFilteringSpecParserRuleCall_0; }
	}

	public class FilteringSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FilteringSpec");
		private final RuleCall cFilterSpecParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//FilteringSpec:
		//	FilterSpec;
		public ParserRule getRule() { return rule; }

		//FilterSpec
		public RuleCall getFilterSpecParserRuleCall() { return cFilterSpecParserRuleCall; }
	}

	public class FilterSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FilterSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIptablesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOptionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cOptionAlternatives_1_0 = (Alternatives)cOptionAssignment_1.eContents().get(0);
		private final Keyword cOptionAKeyword_1_0_0 = (Keyword)cOptionAlternatives_1_0.eContents().get(0);
		private final Keyword cOptionDKeyword_1_0_1 = (Keyword)cOptionAlternatives_1_0.eContents().get(1);
		private final Keyword cOptionPKeyword_1_0_2 = (Keyword)cOptionAlternatives_1_0.eContents().get(2);
		private final Assignment cChainAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cChainChainParserRuleCall_2_0 = (RuleCall)cChainAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cPKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cProtocolAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cProtocolProtocolParserRuleCall_3_1_0 = (RuleCall)cProtocolAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cSKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cIpAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cIpIPExprParserRuleCall_4_1_0 = (RuleCall)cIpAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cIKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cInterfaceAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cInterfaceInterfaceParserRuleCall_5_1_0 = (RuleCall)cInterfaceAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cDKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cIpDstAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cIpDstIPExprParserRuleCall_6_1_0 = (RuleCall)cIpDstAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cSportKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cSourcePortAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cSourcePortINTTerminalRuleCall_7_1_0 = (RuleCall)cSourcePortAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cDportKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cDestinationPortAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cDestinationPortINTTerminalRuleCall_8_1_0 = (RuleCall)cDestinationPortAssignment_8_1.eContents().get(0);
		private final Assignment cNegAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final Keyword cNegExclamationMarkKeyword_9_0 = (Keyword)cNegAssignment_9.eContents().get(0);
		private final Assignment cSynAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final Keyword cSynSynKeyword_10_0 = (Keyword)cSynAssignment_10.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cMKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cMatchesAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cMatchesMatchParserRuleCall_11_1_0 = (RuleCall)cMatchesAssignment_11_1.eContents().get(0);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cCtstateKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Assignment cStatesAssignment_12_1 = (Assignment)cGroup_12.eContents().get(1);
		private final RuleCall cStatesStateParserRuleCall_12_1_0 = (RuleCall)cStatesAssignment_12_1.eContents().get(0);
		private final Group cGroup_12_2 = (Group)cGroup_12.eContents().get(2);
		private final Keyword cCommaKeyword_12_2_0 = (Keyword)cGroup_12_2.eContents().get(0);
		private final Assignment cStatesAssignment_12_2_1 = (Assignment)cGroup_12_2.eContents().get(1);
		private final RuleCall cStatesStateParserRuleCall_12_2_1_0 = (RuleCall)cStatesAssignment_12_2_1.eContents().get(0);
		private final Group cGroup_13 = (Group)cGroup.eContents().get(13);
		private final Keyword cCtdirKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final Assignment cDirAssignment_13_1 = (Assignment)cGroup_13.eContents().get(1);
		private final RuleCall cDirDirParserRuleCall_13_1_0 = (RuleCall)cDirAssignment_13_1.eContents().get(0);
		private final Group cGroup_14 = (Group)cGroup.eContents().get(14);
		private final Keyword cCtstatusKeyword_14_0 = (Keyword)cGroup_14.eContents().get(0);
		private final Assignment cStatusAssignment_14_1 = (Assignment)cGroup_14.eContents().get(1);
		private final RuleCall cStatusStatusParserRuleCall_14_1_0 = (RuleCall)cStatusAssignment_14_1.eContents().get(0);
		private final Group cGroup_15 = (Group)cGroup.eContents().get(15);
		private final Keyword cStateKeyword_15_0 = (Keyword)cGroup_15.eContents().get(0);
		private final Assignment cStatesAssignment_15_1 = (Assignment)cGroup_15.eContents().get(1);
		private final RuleCall cStatesStateParserRuleCall_15_1_0 = (RuleCall)cStatesAssignment_15_1.eContents().get(0);
		private final Group cGroup_15_2 = (Group)cGroup_15.eContents().get(2);
		private final Keyword cCommaKeyword_15_2_0 = (Keyword)cGroup_15_2.eContents().get(0);
		private final Assignment cStatesAssignment_15_2_1 = (Assignment)cGroup_15_2.eContents().get(1);
		private final RuleCall cStatesStateParserRuleCall_15_2_1_0 = (RuleCall)cStatesAssignment_15_2_1.eContents().get(0);
		private final Group cGroup_16 = (Group)cGroup.eContents().get(16);
		private final Keyword cTcpFlagsKeyword_16_0 = (Keyword)cGroup_16.eContents().get(0);
		private final Assignment cExamFlagsAssignment_16_1 = (Assignment)cGroup_16.eContents().get(1);
		private final RuleCall cExamFlagsTCPFlagParserRuleCall_16_1_0 = (RuleCall)cExamFlagsAssignment_16_1.eContents().get(0);
		private final Group cGroup_16_2 = (Group)cGroup_16.eContents().get(2);
		private final Keyword cCommaKeyword_16_2_0 = (Keyword)cGroup_16_2.eContents().get(0);
		private final Assignment cExamFlagsAssignment_16_2_1 = (Assignment)cGroup_16_2.eContents().get(1);
		private final RuleCall cExamFlagsTCPFlagParserRuleCall_16_2_1_0 = (RuleCall)cExamFlagsAssignment_16_2_1.eContents().get(0);
		private final Assignment cFlagsAssignment_16_3 = (Assignment)cGroup_16.eContents().get(3);
		private final RuleCall cFlagsTCPFlagParserRuleCall_16_3_0 = (RuleCall)cFlagsAssignment_16_3.eContents().get(0);
		private final Group cGroup_16_4 = (Group)cGroup_16.eContents().get(4);
		private final Keyword cCommaKeyword_16_4_0 = (Keyword)cGroup_16_4.eContents().get(0);
		private final Assignment cFlagsAssignment_16_4_1 = (Assignment)cGroup_16_4.eContents().get(1);
		private final RuleCall cFlagsTCPFlagParserRuleCall_16_4_1_0 = (RuleCall)cFlagsAssignment_16_4_1.eContents().get(0);
		private final Keyword cJKeyword_17 = (Keyword)cGroup.eContents().get(17);
		private final Assignment cTargetAssignment_18 = (Assignment)cGroup.eContents().get(18);
		private final RuleCall cTargetTargetParserRuleCall_18_0 = (RuleCall)cTargetAssignment_18.eContents().get(0);
		private final Group cGroup_19 = (Group)cGroup.eContents().get(19);
		private final Keyword cLogPrefixKeyword_19_0 = (Keyword)cGroup_19.eContents().get(0);
		private final Assignment cLpAssignment_19_1 = (Assignment)cGroup_19.eContents().get(1);
		private final RuleCall cLpLPParserRuleCall_19_1_0 = (RuleCall)cLpAssignment_19_1.eContents().get(0);
		
		//FilterSpec:
		//	"iptables" option=("-A" | "-D" | "-P") chain=Chain ("-p" protocol=Protocol)? ("-s" ip=IPExpr)? ("-i"
		//	interface=Interface)? ("-d" ipDst=IPExpr)? ("--sport" sourcePort=INT)? ("--dport" destinationPort=INT)? neg?="!"?
		//	syn?="--syn"? ("-m" matches=Match)? ("--ctstate" states+=State ("," states+=State)*)? ("--ctdir" dir=Dir)?
		//	("--ctstatus" status=Status)? ("--state" states+=State ("," states+=State)*)? ("--tcp-flags" examFlags+=TCPFlag (","
		//	examFlags+=TCPFlag)* flags+=TCPFlag ("," flags+=TCPFlag)*)? "-j"? target=Target ("--log-prefix" lp=LP)?;
		public ParserRule getRule() { return rule; }

		//"iptables" option=("-A" | "-D" | "-P") chain=Chain ("-p" protocol=Protocol)? ("-s" ip=IPExpr)? ("-i"
		//interface=Interface)? ("-d" ipDst=IPExpr)? ("--sport" sourcePort=INT)? ("--dport" destinationPort=INT)? neg?="!"?
		//syn?="--syn"? ("-m" matches=Match)? ("--ctstate" states+=State ("," states+=State)*)? ("--ctdir" dir=Dir)?
		//("--ctstatus" status=Status)? ("--state" states+=State ("," states+=State)*)? ("--tcp-flags" examFlags+=TCPFlag (","
		//examFlags+=TCPFlag)* flags+=TCPFlag ("," flags+=TCPFlag)*)? "-j"? target=Target ("--log-prefix" lp=LP)?
		public Group getGroup() { return cGroup; }

		//"iptables"
		public Keyword getIptablesKeyword_0() { return cIptablesKeyword_0; }

		//option=("-A" | "-D" | "-P")
		public Assignment getOptionAssignment_1() { return cOptionAssignment_1; }

		//"-A" | "-D" | "-P"
		public Alternatives getOptionAlternatives_1_0() { return cOptionAlternatives_1_0; }

		//"-A"
		public Keyword getOptionAKeyword_1_0_0() { return cOptionAKeyword_1_0_0; }

		//"-D"
		public Keyword getOptionDKeyword_1_0_1() { return cOptionDKeyword_1_0_1; }

		//"-P"
		public Keyword getOptionPKeyword_1_0_2() { return cOptionPKeyword_1_0_2; }

		//chain=Chain
		public Assignment getChainAssignment_2() { return cChainAssignment_2; }

		//Chain
		public RuleCall getChainChainParserRuleCall_2_0() { return cChainChainParserRuleCall_2_0; }

		//("-p" protocol=Protocol)?
		public Group getGroup_3() { return cGroup_3; }

		//"-p"
		public Keyword getPKeyword_3_0() { return cPKeyword_3_0; }

		//protocol=Protocol
		public Assignment getProtocolAssignment_3_1() { return cProtocolAssignment_3_1; }

		//Protocol
		public RuleCall getProtocolProtocolParserRuleCall_3_1_0() { return cProtocolProtocolParserRuleCall_3_1_0; }

		//("-s" ip=IPExpr)?
		public Group getGroup_4() { return cGroup_4; }

		//"-s"
		public Keyword getSKeyword_4_0() { return cSKeyword_4_0; }

		//ip=IPExpr
		public Assignment getIpAssignment_4_1() { return cIpAssignment_4_1; }

		//IPExpr
		public RuleCall getIpIPExprParserRuleCall_4_1_0() { return cIpIPExprParserRuleCall_4_1_0; }

		//("-i" interface=Interface)?
		public Group getGroup_5() { return cGroup_5; }

		//"-i"
		public Keyword getIKeyword_5_0() { return cIKeyword_5_0; }

		//interface=Interface
		public Assignment getInterfaceAssignment_5_1() { return cInterfaceAssignment_5_1; }

		//Interface
		public RuleCall getInterfaceInterfaceParserRuleCall_5_1_0() { return cInterfaceInterfaceParserRuleCall_5_1_0; }

		//("-d" ipDst=IPExpr)?
		public Group getGroup_6() { return cGroup_6; }

		//"-d"
		public Keyword getDKeyword_6_0() { return cDKeyword_6_0; }

		//ipDst=IPExpr
		public Assignment getIpDstAssignment_6_1() { return cIpDstAssignment_6_1; }

		//IPExpr
		public RuleCall getIpDstIPExprParserRuleCall_6_1_0() { return cIpDstIPExprParserRuleCall_6_1_0; }

		//("--sport" sourcePort=INT)?
		public Group getGroup_7() { return cGroup_7; }

		//"--sport"
		public Keyword getSportKeyword_7_0() { return cSportKeyword_7_0; }

		//sourcePort=INT
		public Assignment getSourcePortAssignment_7_1() { return cSourcePortAssignment_7_1; }

		//INT
		public RuleCall getSourcePortINTTerminalRuleCall_7_1_0() { return cSourcePortINTTerminalRuleCall_7_1_0; }

		//("--dport" destinationPort=INT)?
		public Group getGroup_8() { return cGroup_8; }

		//"--dport"
		public Keyword getDportKeyword_8_0() { return cDportKeyword_8_0; }

		//destinationPort=INT
		public Assignment getDestinationPortAssignment_8_1() { return cDestinationPortAssignment_8_1; }

		//INT
		public RuleCall getDestinationPortINTTerminalRuleCall_8_1_0() { return cDestinationPortINTTerminalRuleCall_8_1_0; }

		//neg?="!"?
		public Assignment getNegAssignment_9() { return cNegAssignment_9; }

		//"!"
		public Keyword getNegExclamationMarkKeyword_9_0() { return cNegExclamationMarkKeyword_9_0; }

		//syn?="--syn"?
		public Assignment getSynAssignment_10() { return cSynAssignment_10; }

		//"--syn"
		public Keyword getSynSynKeyword_10_0() { return cSynSynKeyword_10_0; }

		//("-m" matches=Match)?
		public Group getGroup_11() { return cGroup_11; }

		//"-m"
		public Keyword getMKeyword_11_0() { return cMKeyword_11_0; }

		//matches=Match
		public Assignment getMatchesAssignment_11_1() { return cMatchesAssignment_11_1; }

		//Match
		public RuleCall getMatchesMatchParserRuleCall_11_1_0() { return cMatchesMatchParserRuleCall_11_1_0; }

		//("--ctstate" states+=State ("," states+=State)*)?
		public Group getGroup_12() { return cGroup_12; }

		//"--ctstate"
		public Keyword getCtstateKeyword_12_0() { return cCtstateKeyword_12_0; }

		//states+=State
		public Assignment getStatesAssignment_12_1() { return cStatesAssignment_12_1; }

		//State
		public RuleCall getStatesStateParserRuleCall_12_1_0() { return cStatesStateParserRuleCall_12_1_0; }

		//("," states+=State)*
		public Group getGroup_12_2() { return cGroup_12_2; }

		//","
		public Keyword getCommaKeyword_12_2_0() { return cCommaKeyword_12_2_0; }

		//states+=State
		public Assignment getStatesAssignment_12_2_1() { return cStatesAssignment_12_2_1; }

		//State
		public RuleCall getStatesStateParserRuleCall_12_2_1_0() { return cStatesStateParserRuleCall_12_2_1_0; }

		//("--ctdir" dir=Dir)?
		public Group getGroup_13() { return cGroup_13; }

		//"--ctdir"
		public Keyword getCtdirKeyword_13_0() { return cCtdirKeyword_13_0; }

		//dir=Dir
		public Assignment getDirAssignment_13_1() { return cDirAssignment_13_1; }

		//Dir
		public RuleCall getDirDirParserRuleCall_13_1_0() { return cDirDirParserRuleCall_13_1_0; }

		//("--ctstatus" status=Status)?
		public Group getGroup_14() { return cGroup_14; }

		//"--ctstatus"
		public Keyword getCtstatusKeyword_14_0() { return cCtstatusKeyword_14_0; }

		//status=Status
		public Assignment getStatusAssignment_14_1() { return cStatusAssignment_14_1; }

		//Status
		public RuleCall getStatusStatusParserRuleCall_14_1_0() { return cStatusStatusParserRuleCall_14_1_0; }

		//("--state" states+=State ("," states+=State)*)?
		public Group getGroup_15() { return cGroup_15; }

		//"--state"
		public Keyword getStateKeyword_15_0() { return cStateKeyword_15_0; }

		//states+=State
		public Assignment getStatesAssignment_15_1() { return cStatesAssignment_15_1; }

		//State
		public RuleCall getStatesStateParserRuleCall_15_1_0() { return cStatesStateParserRuleCall_15_1_0; }

		//("," states+=State)*
		public Group getGroup_15_2() { return cGroup_15_2; }

		//","
		public Keyword getCommaKeyword_15_2_0() { return cCommaKeyword_15_2_0; }

		//states+=State
		public Assignment getStatesAssignment_15_2_1() { return cStatesAssignment_15_2_1; }

		//State
		public RuleCall getStatesStateParserRuleCall_15_2_1_0() { return cStatesStateParserRuleCall_15_2_1_0; }

		//("--tcp-flags" examFlags+=TCPFlag ("," examFlags+=TCPFlag)* flags+=TCPFlag ("," flags+=TCPFlag)*)?
		public Group getGroup_16() { return cGroup_16; }

		//"--tcp-flags"
		public Keyword getTcpFlagsKeyword_16_0() { return cTcpFlagsKeyword_16_0; }

		//examFlags+=TCPFlag
		public Assignment getExamFlagsAssignment_16_1() { return cExamFlagsAssignment_16_1; }

		//TCPFlag
		public RuleCall getExamFlagsTCPFlagParserRuleCall_16_1_0() { return cExamFlagsTCPFlagParserRuleCall_16_1_0; }

		//("," examFlags+=TCPFlag)*
		public Group getGroup_16_2() { return cGroup_16_2; }

		//","
		public Keyword getCommaKeyword_16_2_0() { return cCommaKeyword_16_2_0; }

		//examFlags+=TCPFlag
		public Assignment getExamFlagsAssignment_16_2_1() { return cExamFlagsAssignment_16_2_1; }

		//TCPFlag
		public RuleCall getExamFlagsTCPFlagParserRuleCall_16_2_1_0() { return cExamFlagsTCPFlagParserRuleCall_16_2_1_0; }

		//flags+=TCPFlag
		public Assignment getFlagsAssignment_16_3() { return cFlagsAssignment_16_3; }

		//TCPFlag
		public RuleCall getFlagsTCPFlagParserRuleCall_16_3_0() { return cFlagsTCPFlagParserRuleCall_16_3_0; }

		//("," flags+=TCPFlag)*
		public Group getGroup_16_4() { return cGroup_16_4; }

		//","
		public Keyword getCommaKeyword_16_4_0() { return cCommaKeyword_16_4_0; }

		//flags+=TCPFlag
		public Assignment getFlagsAssignment_16_4_1() { return cFlagsAssignment_16_4_1; }

		//TCPFlag
		public RuleCall getFlagsTCPFlagParserRuleCall_16_4_1_0() { return cFlagsTCPFlagParserRuleCall_16_4_1_0; }

		//"-j"?
		public Keyword getJKeyword_17() { return cJKeyword_17; }

		//target=Target
		public Assignment getTargetAssignment_18() { return cTargetAssignment_18; }

		//Target
		public RuleCall getTargetTargetParserRuleCall_18_0() { return cTargetTargetParserRuleCall_18_0; }

		//("--log-prefix" lp=LP)?
		public Group getGroup_19() { return cGroup_19; }

		//"--log-prefix"
		public Keyword getLogPrefixKeyword_19_0() { return cLogPrefixKeyword_19_0; }

		//lp=LP
		public Assignment getLpAssignment_19_1() { return cLpAssignment_19_1; }

		//LP
		public RuleCall getLpLPParserRuleCall_19_1_0() { return cLpLPParserRuleCall_19_1_0; }
	}

	public class InterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Interface");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Interface:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class LPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LP");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//LP:
		//	name=STRING;
		public ParserRule getRule() { return rule; }

		//name=STRING
		public Assignment getNameAssignment() { return cNameAssignment; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0() { return cNameSTRINGTerminalRuleCall_0; }
	}

	public class MatchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Match");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cNameAlternatives_0 = (Alternatives)cNameAssignment.eContents().get(0);
		private final RuleCall cNameConntrackParserRuleCall_0_0 = (RuleCall)cNameAlternatives_0.eContents().get(0);
		private final RuleCall cNameStateMatchParserRuleCall_0_1 = (RuleCall)cNameAlternatives_0.eContents().get(1);
		
		//Match:
		//	name=(Conntrack | StateMatch);
		public ParserRule getRule() { return rule; }

		//name=(Conntrack | StateMatch)
		public Assignment getNameAssignment() { return cNameAssignment; }

		//Conntrack | StateMatch
		public Alternatives getNameAlternatives_0() { return cNameAlternatives_0; }

		//Conntrack
		public RuleCall getNameConntrackParserRuleCall_0_0() { return cNameConntrackParserRuleCall_0_0; }

		//StateMatch
		public RuleCall getNameStateMatchParserRuleCall_0_1() { return cNameStateMatchParserRuleCall_0_1; }
	}

	public class DirElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Dir");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Dir:
		//	ID;
		public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class StatusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Status");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Status:
		//	ID;
		public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class ConntrackElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Conntrack");
		private final Keyword cConntrackKeyword = (Keyword)rule.eContents().get(1);
		
		//Conntrack:
		//	"conntrack";
		public ParserRule getRule() { return rule; }

		//"conntrack"
		public Keyword getConntrackKeyword() { return cConntrackKeyword; }
	}

	public class StateMatchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateMatch");
		private final Keyword cStateKeyword = (Keyword)rule.eContents().get(1);
		
		//StateMatch:
		//	"State";
		public ParserRule getRule() { return rule; }

		//"State"
		public Keyword getStateKeyword() { return cStateKeyword; }
	}

	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "State");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cNameAlternatives_0 = (Alternatives)cNameAssignment.eContents().get(0);
		private final RuleCall cNameNormalMatchStatesParserRuleCall_0_0 = (RuleCall)cNameAlternatives_0.eContents().get(0);
		private final RuleCall cNameStateFulMatchStatesParserRuleCall_0_1 = (RuleCall)cNameAlternatives_0.eContents().get(1);
		
		//State:
		//	name=(NormalMatchStates | StateFulMatchStates);
		public ParserRule getRule() { return rule; }

		//name=(NormalMatchStates | StateFulMatchStates)
		public Assignment getNameAssignment() { return cNameAssignment; }

		//NormalMatchStates | StateFulMatchStates
		public Alternatives getNameAlternatives_0() { return cNameAlternatives_0; }

		//NormalMatchStates
		public RuleCall getNameNormalMatchStatesParserRuleCall_0_0() { return cNameNormalMatchStatesParserRuleCall_0_0; }

		//StateFulMatchStates
		public RuleCall getNameStateFulMatchStatesParserRuleCall_0_1() { return cNameStateFulMatchStatesParserRuleCall_0_1; }
	}

	public class StateFulMatchStatesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateFulMatchStates");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNoneSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSynSentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSynRecvParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEstablishedParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFinWaitParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cCloseWaitParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cLastAckParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cTimeWaitParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cCloseParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//StateFulMatchStates:
		//	NoneS | SynSent | SynRecv | Established | FinWait | CloseWait | LastAck | TimeWait | Close;
		public ParserRule getRule() { return rule; }

		//NoneS | SynSent | SynRecv | Established | FinWait | CloseWait | LastAck | TimeWait | Close
		public Alternatives getAlternatives() { return cAlternatives; }

		//NoneS
		public RuleCall getNoneSParserRuleCall_0() { return cNoneSParserRuleCall_0; }

		//SynSent
		public RuleCall getSynSentParserRuleCall_1() { return cSynSentParserRuleCall_1; }

		//SynRecv
		public RuleCall getSynRecvParserRuleCall_2() { return cSynRecvParserRuleCall_2; }

		//Established
		public RuleCall getEstablishedParserRuleCall_3() { return cEstablishedParserRuleCall_3; }

		//FinWait
		public RuleCall getFinWaitParserRuleCall_4() { return cFinWaitParserRuleCall_4; }

		//CloseWait
		public RuleCall getCloseWaitParserRuleCall_5() { return cCloseWaitParserRuleCall_5; }

		//LastAck
		public RuleCall getLastAckParserRuleCall_6() { return cLastAckParserRuleCall_6; }

		//TimeWait
		public RuleCall getTimeWaitParserRuleCall_7() { return cTimeWaitParserRuleCall_7; }

		//Close
		public RuleCall getCloseParserRuleCall_8() { return cCloseParserRuleCall_8; }
	}

	public class NormalMatchStatesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NormalMatchStates");
		private final RuleCall cNewParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//NormalMatchStates:
		//	New;
		public ParserRule getRule() { return rule; }

		//New
		public RuleCall getNewParserRuleCall() { return cNewParserRuleCall; }
	}

	public class NewElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "New");
		private final Keyword cNEWKeyword = (Keyword)rule.eContents().get(1);
		
		//New:
		//	"NEW";
		public ParserRule getRule() { return rule; }

		//"NEW"
		public Keyword getNEWKeyword() { return cNEWKeyword; }
	}

	public class NoneSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NoneS");
		private final Keyword cNONEKeyword = (Keyword)rule.eContents().get(1);
		
		//NoneS:
		//	"NONE";
		public ParserRule getRule() { return rule; }

		//"NONE"
		public Keyword getNONEKeyword() { return cNONEKeyword; }
	}

	public class SynSentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SynSent");
		private final Keyword cSYN_SENTKeyword = (Keyword)rule.eContents().get(1);
		
		//SynSent:
		//	"SYN_SENT";
		public ParserRule getRule() { return rule; }

		//"SYN_SENT"
		public Keyword getSYN_SENTKeyword() { return cSYN_SENTKeyword; }
	}

	public class SynRecvElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SynRecv");
		private final Keyword cSYN_RECVKeyword = (Keyword)rule.eContents().get(1);
		
		//SynRecv:
		//	"SYN_RECV";
		public ParserRule getRule() { return rule; }

		//"SYN_RECV"
		public Keyword getSYN_RECVKeyword() { return cSYN_RECVKeyword; }
	}

	public class EstablishedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Established");
		private final Keyword cESTABLISHEDKeyword = (Keyword)rule.eContents().get(1);
		
		//Established:
		//	"ESTABLISHED";
		public ParserRule getRule() { return rule; }

		//"ESTABLISHED"
		public Keyword getESTABLISHEDKeyword() { return cESTABLISHEDKeyword; }
	}

	public class FinWaitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FinWait");
		private final Keyword cFIN_WAITKeyword = (Keyword)rule.eContents().get(1);
		
		//FinWait:
		//	"FIN_WAIT";
		public ParserRule getRule() { return rule; }

		//"FIN_WAIT"
		public Keyword getFIN_WAITKeyword() { return cFIN_WAITKeyword; }
	}

	public class CloseWaitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CloseWait");
		private final Keyword cCLOSE_WAITKeyword = (Keyword)rule.eContents().get(1);
		
		//CloseWait:
		//	"CLOSE_WAIT";
		public ParserRule getRule() { return rule; }

		//"CLOSE_WAIT"
		public Keyword getCLOSE_WAITKeyword() { return cCLOSE_WAITKeyword; }
	}

	public class LastAckElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LastAck");
		private final Keyword cLAST_ACKKeyword = (Keyword)rule.eContents().get(1);
		
		//LastAck:
		//	"LAST_ACK";
		public ParserRule getRule() { return rule; }

		//"LAST_ACK"
		public Keyword getLAST_ACKKeyword() { return cLAST_ACKKeyword; }
	}

	public class TimeWaitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TimeWait");
		private final Keyword cTIME_WAITKeyword = (Keyword)rule.eContents().get(1);
		
		//TimeWait:
		//	"TIME_WAIT";
		public ParserRule getRule() { return rule; }

		//"TIME_WAIT"
		public Keyword getTIME_WAITKeyword() { return cTIME_WAITKeyword; }
	}

	public class CloseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Close");
		private final Keyword cCLOSEKeyword = (Keyword)rule.eContents().get(1);
		
		//Close:
		//	"CLOSE";
		public ParserRule getRule() { return rule; }

		//"CLOSE"
		public Keyword getCLOSEKeyword() { return cCLOSEKeyword; }
	}

	public class TCPFlagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TCPFlag");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cNameAlternatives_0 = (Alternatives)cNameAssignment.eContents().get(0);
		private final RuleCall cNameSynParserRuleCall_0_0 = (RuleCall)cNameAlternatives_0.eContents().get(0);
		private final RuleCall cNameAckParserRuleCall_0_1 = (RuleCall)cNameAlternatives_0.eContents().get(1);
		private final RuleCall cNameFinParserRuleCall_0_2 = (RuleCall)cNameAlternatives_0.eContents().get(2);
		private final RuleCall cNameRstParserRuleCall_0_3 = (RuleCall)cNameAlternatives_0.eContents().get(3);
		private final RuleCall cNameAllParserRuleCall_0_4 = (RuleCall)cNameAlternatives_0.eContents().get(4);
		private final RuleCall cNameNoneParserRuleCall_0_5 = (RuleCall)cNameAlternatives_0.eContents().get(5);
		private final RuleCall cNamePshParserRuleCall_0_6 = (RuleCall)cNameAlternatives_0.eContents().get(6);
		private final RuleCall cNameUrgParserRuleCall_0_7 = (RuleCall)cNameAlternatives_0.eContents().get(7);
		
		//TCPFlag:
		//	name=(Syn | Ack | Fin | Rst | All | None | Psh | Urg);
		public ParserRule getRule() { return rule; }

		//name=(Syn | Ack | Fin | Rst | All | None | Psh | Urg)
		public Assignment getNameAssignment() { return cNameAssignment; }

		//Syn | Ack | Fin | Rst | All | None | Psh | Urg
		public Alternatives getNameAlternatives_0() { return cNameAlternatives_0; }

		//Syn
		public RuleCall getNameSynParserRuleCall_0_0() { return cNameSynParserRuleCall_0_0; }

		//Ack
		public RuleCall getNameAckParserRuleCall_0_1() { return cNameAckParserRuleCall_0_1; }

		//Fin
		public RuleCall getNameFinParserRuleCall_0_2() { return cNameFinParserRuleCall_0_2; }

		//Rst
		public RuleCall getNameRstParserRuleCall_0_3() { return cNameRstParserRuleCall_0_3; }

		//All
		public RuleCall getNameAllParserRuleCall_0_4() { return cNameAllParserRuleCall_0_4; }

		//None
		public RuleCall getNameNoneParserRuleCall_0_5() { return cNameNoneParserRuleCall_0_5; }

		//Psh
		public RuleCall getNamePshParserRuleCall_0_6() { return cNamePshParserRuleCall_0_6; }

		//Urg
		public RuleCall getNameUrgParserRuleCall_0_7() { return cNameUrgParserRuleCall_0_7; }
	}

	public class SynElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Syn");
		private final Keyword cSYNKeyword = (Keyword)rule.eContents().get(1);
		
		//Syn:
		//	"SYN";
		public ParserRule getRule() { return rule; }

		//"SYN"
		public Keyword getSYNKeyword() { return cSYNKeyword; }
	}

	public class AckElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Ack");
		private final Keyword cACKKeyword = (Keyword)rule.eContents().get(1);
		
		//Ack:
		//	"ACK";
		public ParserRule getRule() { return rule; }

		//"ACK"
		public Keyword getACKKeyword() { return cACKKeyword; }
	}

	public class FinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Fin");
		private final Keyword cFINKeyword = (Keyword)rule.eContents().get(1);
		
		//Fin:
		//	"FIN";
		public ParserRule getRule() { return rule; }

		//"FIN"
		public Keyword getFINKeyword() { return cFINKeyword; }
	}

	public class RstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rst");
		private final Keyword cRSTKeyword = (Keyword)rule.eContents().get(1);
		
		//Rst:
		//	"RST";
		public ParserRule getRule() { return rule; }

		//"RST"
		public Keyword getRSTKeyword() { return cRSTKeyword; }
	}

	public class AllElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "All");
		private final Keyword cALLKeyword = (Keyword)rule.eContents().get(1);
		
		//All:
		//	"ALL";
		public ParserRule getRule() { return rule; }

		//"ALL"
		public Keyword getALLKeyword() { return cALLKeyword; }
	}

	public class NoneElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "None");
		private final Keyword cNONEKeyword = (Keyword)rule.eContents().get(1);
		
		//None:
		//	"NONE";
		public ParserRule getRule() { return rule; }

		//"NONE"
		public Keyword getNONEKeyword() { return cNONEKeyword; }
	}

	public class PshElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Psh");
		private final Keyword cPSHKeyword = (Keyword)rule.eContents().get(1);
		
		//Psh:
		//	"PSH";
		public ParserRule getRule() { return rule; }

		//"PSH"
		public Keyword getPSHKeyword() { return cPSHKeyword; }
	}

	public class UrgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Urg");
		private final Keyword cURGKeyword = (Keyword)rule.eContents().get(1);
		
		//Urg:
		//	"URG";
		public ParserRule getRule() { return rule; }

		//"URG"
		public Keyword getURGKeyword() { return cURGKeyword; }
	}

	public class ProtocolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Protocol");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTcpParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUdpParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIcmpParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Protocol:
		//	Tcp | Udp | Icmp;
		public ParserRule getRule() { return rule; }

		//Tcp | Udp | Icmp
		public Alternatives getAlternatives() { return cAlternatives; }

		//Tcp
		public RuleCall getTcpParserRuleCall_0() { return cTcpParserRuleCall_0; }

		//Udp
		public RuleCall getUdpParserRuleCall_1() { return cUdpParserRuleCall_1; }

		//Icmp
		public RuleCall getIcmpParserRuleCall_2() { return cIcmpParserRuleCall_2; }
	}

	public class TcpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Tcp");
		private final Keyword cTcpKeyword = (Keyword)rule.eContents().get(1);
		
		//Tcp:
		//	"tcp";
		public ParserRule getRule() { return rule; }

		//"tcp"
		public Keyword getTcpKeyword() { return cTcpKeyword; }
	}

	public class UdpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Udp");
		private final Keyword cUdpKeyword = (Keyword)rule.eContents().get(1);
		
		//Udp:
		//	"udp";
		public ParserRule getRule() { return rule; }

		//"udp"
		public Keyword getUdpKeyword() { return cUdpKeyword; }
	}

	public class IcmpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Icmp");
		private final Keyword cIcmpKeyword = (Keyword)rule.eContents().get(1);
		
		//Icmp:
		//	"icmp";
		public ParserRule getRule() { return rule; }

		//"icmp"
		public Keyword getIcmpKeyword() { return cIcmpKeyword; }
	}

	public class TargetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Target");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		////Target:
		////	defaultTarget=DefaultTarget | customChain=CustomChain
		////;
		//Target:
		//	ID;
		public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class ChainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Chain");
		private final Assignment cChainNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cChainNameIDTerminalRuleCall_0 = (RuleCall)cChainNameAssignment.eContents().get(0);
		
		////DefaultTarget:
		////	Accept | Drop | Return
		////	;
		////Accept:
		////	'ACCEPT'
		////;
		////Drop:
		////	'DROP'
		////;
		////Return:
		////	'RETURN'
		////;
		//Chain: //defaultChain = DefaultChain | customChain = CustomChain
		//	chainName=ID;
		public ParserRule getRule() { return rule; }

		////defaultChain = DefaultChain | customChain = CustomChain
		//chainName=ID
		public Assignment getChainNameAssignment() { return cChainNameAssignment; }

		//ID
		public RuleCall getChainNameIDTerminalRuleCall_0() { return cChainNameIDTerminalRuleCall_0; }
	}

	public class CustomChainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CustomChain");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cNameChainNameCrossReference_0 = (CrossReference)cNameAssignment.eContents().get(0);
		private final RuleCall cNameChainNameIDTerminalRuleCall_0_1 = (RuleCall)cNameChainNameCrossReference_0.eContents().get(1);
		
		////DefaultChain:
		////	Input | Output | Forward
		////;
		////CustomChain:
		////	name=[ChainName]
		////;
		////ChainID:
		////	('INPUT' | 'OUTPUT' | 'FORWARD' | CustomChain)
		////;
		//CustomChain:
		//	name=[ChainName];
		public ParserRule getRule() { return rule; }

		//name=[ChainName]
		public Assignment getNameAssignment() { return cNameAssignment; }

		//[ChainName]
		public CrossReference getNameChainNameCrossReference_0() { return cNameChainNameCrossReference_0; }

		//ID
		public RuleCall getNameChainNameIDTerminalRuleCall_0_1() { return cNameChainNameIDTerminalRuleCall_0_1; }
	}

	public class ChainDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChainDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIptablesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cNKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cChainNameParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		////Input:
		////	'INPUT'
		////;
		////Output:
		////	'OUTPUT'
		////;
		////Forward:
		////	'FORWARD'
		////;
		//ChainDeclaration:
		//	"iptables" "-N" ChainName;
		public ParserRule getRule() { return rule; }

		//"iptables" "-N" ChainName
		public Group getGroup() { return cGroup; }

		//"iptables"
		public Keyword getIptablesKeyword_0() { return cIptablesKeyword_0; }

		//"-N"
		public Keyword getNKeyword_1() { return cNKeyword_1; }

		//ChainName
		public RuleCall getChainNameParserRuleCall_2() { return cChainNameParserRuleCall_2; }
	}

	public class ChainNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChainName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ChainName:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class IPExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IPExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIpByteExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cIpByteExprParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cIpByteExprParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Keyword cFullStopKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final RuleCall cIpByteExprParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final RuleCall cIpRangeExprParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		//IPExpr:
		//	ipByteExpr "." ipByteExpr "." ipByteExpr "." ipByteExpr IpRangeExpr?;
		public ParserRule getRule() { return rule; }

		//ipByteExpr "." ipByteExpr "." ipByteExpr "." ipByteExpr IpRangeExpr?
		public Group getGroup() { return cGroup; }

		//ipByteExpr
		public RuleCall getIpByteExprParserRuleCall_0() { return cIpByteExprParserRuleCall_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//ipByteExpr
		public RuleCall getIpByteExprParserRuleCall_2() { return cIpByteExprParserRuleCall_2; }

		//"."
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }

		//ipByteExpr
		public RuleCall getIpByteExprParserRuleCall_4() { return cIpByteExprParserRuleCall_4; }

		//"."
		public Keyword getFullStopKeyword_5() { return cFullStopKeyword_5; }

		//ipByteExpr
		public RuleCall getIpByteExprParserRuleCall_6() { return cIpByteExprParserRuleCall_6; }

		//IpRangeExpr?
		public RuleCall getIpRangeExprParserRuleCall_7() { return cIpRangeExprParserRuleCall_7; }
	}

	public class IpByteExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ipByteExpr");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ipByteExpr:
		//	INT;
		public ParserRule getRule() { return rule; }

		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}

	public class IpRangeExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IpRangeExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSolidusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//IpRangeExpr:
		//	"/" INT;
		public ParserRule getRule() { return rule; }

		//"/" INT
		public Group getGroup() { return cGroup; }

		//"/"
		public Keyword getSolidusKeyword_0() { return cSolidusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	
	
	private ModelElements pModel;
	private RuleElements pRule;
	private FilterDeclarationElements pFilterDeclaration;
	private FilteringSpecElements pFilteringSpec;
	private FilterSpecElements pFilterSpec;
	private InterfaceElements pInterface;
	private LPElements pLP;
	private MatchElements pMatch;
	private DirElements pDir;
	private StatusElements pStatus;
	private ConntrackElements pConntrack;
	private StateMatchElements pStateMatch;
	private StateElements pState;
	private StateFulMatchStatesElements pStateFulMatchStates;
	private NormalMatchStatesElements pNormalMatchStates;
	private NewElements pNew;
	private NoneSElements pNoneS;
	private SynSentElements pSynSent;
	private SynRecvElements pSynRecv;
	private EstablishedElements pEstablished;
	private FinWaitElements pFinWait;
	private CloseWaitElements pCloseWait;
	private LastAckElements pLastAck;
	private TimeWaitElements pTimeWait;
	private CloseElements pClose;
	private TCPFlagElements pTCPFlag;
	private SynElements pSyn;
	private AckElements pAck;
	private FinElements pFin;
	private RstElements pRst;
	private AllElements pAll;
	private NoneElements pNone;
	private PshElements pPsh;
	private UrgElements pUrg;
	private ProtocolElements pProtocol;
	private TcpElements pTcp;
	private UdpElements pUdp;
	private IcmpElements pIcmp;
	private TargetElements pTarget;
	private ChainElements pChain;
	private CustomChainElements pCustomChain;
	private ChainDeclarationElements pChainDeclaration;
	private ChainNameElements pChainName;
	private IPExprElements pIPExpr;
	private IpByteExprElements pIpByteExpr;
	private IpRangeExprElements pIpRangeExpr;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public IptablesGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	rules+=Rule*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Rule:
	//	declaration=ChainDeclaration | filter=FilterDeclaration;
	public RuleElements getRuleAccess() {
		return (pRule != null) ? pRule : (pRule = new RuleElements());
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}

	//FilterDeclaration:
	//	filter=FilteringSpec;
	public FilterDeclarationElements getFilterDeclarationAccess() {
		return (pFilterDeclaration != null) ? pFilterDeclaration : (pFilterDeclaration = new FilterDeclarationElements());
	}
	
	public ParserRule getFilterDeclarationRule() {
		return getFilterDeclarationAccess().getRule();
	}

	//FilteringSpec:
	//	FilterSpec;
	public FilteringSpecElements getFilteringSpecAccess() {
		return (pFilteringSpec != null) ? pFilteringSpec : (pFilteringSpec = new FilteringSpecElements());
	}
	
	public ParserRule getFilteringSpecRule() {
		return getFilteringSpecAccess().getRule();
	}

	//FilterSpec:
	//	"iptables" option=("-A" | "-D" | "-P") chain=Chain ("-p" protocol=Protocol)? ("-s" ip=IPExpr)? ("-i"
	//	interface=Interface)? ("-d" ipDst=IPExpr)? ("--sport" sourcePort=INT)? ("--dport" destinationPort=INT)? neg?="!"?
	//	syn?="--syn"? ("-m" matches=Match)? ("--ctstate" states+=State ("," states+=State)*)? ("--ctdir" dir=Dir)?
	//	("--ctstatus" status=Status)? ("--state" states+=State ("," states+=State)*)? ("--tcp-flags" examFlags+=TCPFlag (","
	//	examFlags+=TCPFlag)* flags+=TCPFlag ("," flags+=TCPFlag)*)? "-j"? target=Target ("--log-prefix" lp=LP)?;
	public FilterSpecElements getFilterSpecAccess() {
		return (pFilterSpec != null) ? pFilterSpec : (pFilterSpec = new FilterSpecElements());
	}
	
	public ParserRule getFilterSpecRule() {
		return getFilterSpecAccess().getRule();
	}

	//Interface:
	//	name=ID;
	public InterfaceElements getInterfaceAccess() {
		return (pInterface != null) ? pInterface : (pInterface = new InterfaceElements());
	}
	
	public ParserRule getInterfaceRule() {
		return getInterfaceAccess().getRule();
	}

	//LP:
	//	name=STRING;
	public LPElements getLPAccess() {
		return (pLP != null) ? pLP : (pLP = new LPElements());
	}
	
	public ParserRule getLPRule() {
		return getLPAccess().getRule();
	}

	//Match:
	//	name=(Conntrack | StateMatch);
	public MatchElements getMatchAccess() {
		return (pMatch != null) ? pMatch : (pMatch = new MatchElements());
	}
	
	public ParserRule getMatchRule() {
		return getMatchAccess().getRule();
	}

	//Dir:
	//	ID;
	public DirElements getDirAccess() {
		return (pDir != null) ? pDir : (pDir = new DirElements());
	}
	
	public ParserRule getDirRule() {
		return getDirAccess().getRule();
	}

	//Status:
	//	ID;
	public StatusElements getStatusAccess() {
		return (pStatus != null) ? pStatus : (pStatus = new StatusElements());
	}
	
	public ParserRule getStatusRule() {
		return getStatusAccess().getRule();
	}

	//Conntrack:
	//	"conntrack";
	public ConntrackElements getConntrackAccess() {
		return (pConntrack != null) ? pConntrack : (pConntrack = new ConntrackElements());
	}
	
	public ParserRule getConntrackRule() {
		return getConntrackAccess().getRule();
	}

	//StateMatch:
	//	"State";
	public StateMatchElements getStateMatchAccess() {
		return (pStateMatch != null) ? pStateMatch : (pStateMatch = new StateMatchElements());
	}
	
	public ParserRule getStateMatchRule() {
		return getStateMatchAccess().getRule();
	}

	//State:
	//	name=(NormalMatchStates | StateFulMatchStates);
	public StateElements getStateAccess() {
		return (pState != null) ? pState : (pState = new StateElements());
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}

	//StateFulMatchStates:
	//	NoneS | SynSent | SynRecv | Established | FinWait | CloseWait | LastAck | TimeWait | Close;
	public StateFulMatchStatesElements getStateFulMatchStatesAccess() {
		return (pStateFulMatchStates != null) ? pStateFulMatchStates : (pStateFulMatchStates = new StateFulMatchStatesElements());
	}
	
	public ParserRule getStateFulMatchStatesRule() {
		return getStateFulMatchStatesAccess().getRule();
	}

	//NormalMatchStates:
	//	New;
	public NormalMatchStatesElements getNormalMatchStatesAccess() {
		return (pNormalMatchStates != null) ? pNormalMatchStates : (pNormalMatchStates = new NormalMatchStatesElements());
	}
	
	public ParserRule getNormalMatchStatesRule() {
		return getNormalMatchStatesAccess().getRule();
	}

	//New:
	//	"NEW";
	public NewElements getNewAccess() {
		return (pNew != null) ? pNew : (pNew = new NewElements());
	}
	
	public ParserRule getNewRule() {
		return getNewAccess().getRule();
	}

	//NoneS:
	//	"NONE";
	public NoneSElements getNoneSAccess() {
		return (pNoneS != null) ? pNoneS : (pNoneS = new NoneSElements());
	}
	
	public ParserRule getNoneSRule() {
		return getNoneSAccess().getRule();
	}

	//SynSent:
	//	"SYN_SENT";
	public SynSentElements getSynSentAccess() {
		return (pSynSent != null) ? pSynSent : (pSynSent = new SynSentElements());
	}
	
	public ParserRule getSynSentRule() {
		return getSynSentAccess().getRule();
	}

	//SynRecv:
	//	"SYN_RECV";
	public SynRecvElements getSynRecvAccess() {
		return (pSynRecv != null) ? pSynRecv : (pSynRecv = new SynRecvElements());
	}
	
	public ParserRule getSynRecvRule() {
		return getSynRecvAccess().getRule();
	}

	//Established:
	//	"ESTABLISHED";
	public EstablishedElements getEstablishedAccess() {
		return (pEstablished != null) ? pEstablished : (pEstablished = new EstablishedElements());
	}
	
	public ParserRule getEstablishedRule() {
		return getEstablishedAccess().getRule();
	}

	//FinWait:
	//	"FIN_WAIT";
	public FinWaitElements getFinWaitAccess() {
		return (pFinWait != null) ? pFinWait : (pFinWait = new FinWaitElements());
	}
	
	public ParserRule getFinWaitRule() {
		return getFinWaitAccess().getRule();
	}

	//CloseWait:
	//	"CLOSE_WAIT";
	public CloseWaitElements getCloseWaitAccess() {
		return (pCloseWait != null) ? pCloseWait : (pCloseWait = new CloseWaitElements());
	}
	
	public ParserRule getCloseWaitRule() {
		return getCloseWaitAccess().getRule();
	}

	//LastAck:
	//	"LAST_ACK";
	public LastAckElements getLastAckAccess() {
		return (pLastAck != null) ? pLastAck : (pLastAck = new LastAckElements());
	}
	
	public ParserRule getLastAckRule() {
		return getLastAckAccess().getRule();
	}

	//TimeWait:
	//	"TIME_WAIT";
	public TimeWaitElements getTimeWaitAccess() {
		return (pTimeWait != null) ? pTimeWait : (pTimeWait = new TimeWaitElements());
	}
	
	public ParserRule getTimeWaitRule() {
		return getTimeWaitAccess().getRule();
	}

	//Close:
	//	"CLOSE";
	public CloseElements getCloseAccess() {
		return (pClose != null) ? pClose : (pClose = new CloseElements());
	}
	
	public ParserRule getCloseRule() {
		return getCloseAccess().getRule();
	}

	//TCPFlag:
	//	name=(Syn | Ack | Fin | Rst | All | None | Psh | Urg);
	public TCPFlagElements getTCPFlagAccess() {
		return (pTCPFlag != null) ? pTCPFlag : (pTCPFlag = new TCPFlagElements());
	}
	
	public ParserRule getTCPFlagRule() {
		return getTCPFlagAccess().getRule();
	}

	//Syn:
	//	"SYN";
	public SynElements getSynAccess() {
		return (pSyn != null) ? pSyn : (pSyn = new SynElements());
	}
	
	public ParserRule getSynRule() {
		return getSynAccess().getRule();
	}

	//Ack:
	//	"ACK";
	public AckElements getAckAccess() {
		return (pAck != null) ? pAck : (pAck = new AckElements());
	}
	
	public ParserRule getAckRule() {
		return getAckAccess().getRule();
	}

	//Fin:
	//	"FIN";
	public FinElements getFinAccess() {
		return (pFin != null) ? pFin : (pFin = new FinElements());
	}
	
	public ParserRule getFinRule() {
		return getFinAccess().getRule();
	}

	//Rst:
	//	"RST";
	public RstElements getRstAccess() {
		return (pRst != null) ? pRst : (pRst = new RstElements());
	}
	
	public ParserRule getRstRule() {
		return getRstAccess().getRule();
	}

	//All:
	//	"ALL";
	public AllElements getAllAccess() {
		return (pAll != null) ? pAll : (pAll = new AllElements());
	}
	
	public ParserRule getAllRule() {
		return getAllAccess().getRule();
	}

	//None:
	//	"NONE";
	public NoneElements getNoneAccess() {
		return (pNone != null) ? pNone : (pNone = new NoneElements());
	}
	
	public ParserRule getNoneRule() {
		return getNoneAccess().getRule();
	}

	//Psh:
	//	"PSH";
	public PshElements getPshAccess() {
		return (pPsh != null) ? pPsh : (pPsh = new PshElements());
	}
	
	public ParserRule getPshRule() {
		return getPshAccess().getRule();
	}

	//Urg:
	//	"URG";
	public UrgElements getUrgAccess() {
		return (pUrg != null) ? pUrg : (pUrg = new UrgElements());
	}
	
	public ParserRule getUrgRule() {
		return getUrgAccess().getRule();
	}

	//Protocol:
	//	Tcp | Udp | Icmp;
	public ProtocolElements getProtocolAccess() {
		return (pProtocol != null) ? pProtocol : (pProtocol = new ProtocolElements());
	}
	
	public ParserRule getProtocolRule() {
		return getProtocolAccess().getRule();
	}

	//Tcp:
	//	"tcp";
	public TcpElements getTcpAccess() {
		return (pTcp != null) ? pTcp : (pTcp = new TcpElements());
	}
	
	public ParserRule getTcpRule() {
		return getTcpAccess().getRule();
	}

	//Udp:
	//	"udp";
	public UdpElements getUdpAccess() {
		return (pUdp != null) ? pUdp : (pUdp = new UdpElements());
	}
	
	public ParserRule getUdpRule() {
		return getUdpAccess().getRule();
	}

	//Icmp:
	//	"icmp";
	public IcmpElements getIcmpAccess() {
		return (pIcmp != null) ? pIcmp : (pIcmp = new IcmpElements());
	}
	
	public ParserRule getIcmpRule() {
		return getIcmpAccess().getRule();
	}

	////Target:
	////	defaultTarget=DefaultTarget | customChain=CustomChain
	////;
	//Target:
	//	ID;
	public TargetElements getTargetAccess() {
		return (pTarget != null) ? pTarget : (pTarget = new TargetElements());
	}
	
	public ParserRule getTargetRule() {
		return getTargetAccess().getRule();
	}

	////DefaultTarget:
	////	Accept | Drop | Return
	////	;
	////Accept:
	////	'ACCEPT'
	////;
	////Drop:
	////	'DROP'
	////;
	////Return:
	////	'RETURN'
	////;
	//Chain: //defaultChain = DefaultChain | customChain = CustomChain
	//	chainName=ID;
	public ChainElements getChainAccess() {
		return (pChain != null) ? pChain : (pChain = new ChainElements());
	}
	
	public ParserRule getChainRule() {
		return getChainAccess().getRule();
	}

	////DefaultChain:
	////	Input | Output | Forward
	////;
	////CustomChain:
	////	name=[ChainName]
	////;
	////ChainID:
	////	('INPUT' | 'OUTPUT' | 'FORWARD' | CustomChain)
	////;
	//CustomChain:
	//	name=[ChainName];
	public CustomChainElements getCustomChainAccess() {
		return (pCustomChain != null) ? pCustomChain : (pCustomChain = new CustomChainElements());
	}
	
	public ParserRule getCustomChainRule() {
		return getCustomChainAccess().getRule();
	}

	////Input:
	////	'INPUT'
	////;
	////Output:
	////	'OUTPUT'
	////;
	////Forward:
	////	'FORWARD'
	////;
	//ChainDeclaration:
	//	"iptables" "-N" ChainName;
	public ChainDeclarationElements getChainDeclarationAccess() {
		return (pChainDeclaration != null) ? pChainDeclaration : (pChainDeclaration = new ChainDeclarationElements());
	}
	
	public ParserRule getChainDeclarationRule() {
		return getChainDeclarationAccess().getRule();
	}

	//ChainName:
	//	name=ID;
	public ChainNameElements getChainNameAccess() {
		return (pChainName != null) ? pChainName : (pChainName = new ChainNameElements());
	}
	
	public ParserRule getChainNameRule() {
		return getChainNameAccess().getRule();
	}

	//IPExpr:
	//	ipByteExpr "." ipByteExpr "." ipByteExpr "." ipByteExpr IpRangeExpr?;
	public IPExprElements getIPExprAccess() {
		return (pIPExpr != null) ? pIPExpr : (pIPExpr = new IPExprElements());
	}
	
	public ParserRule getIPExprRule() {
		return getIPExprAccess().getRule();
	}

	//ipByteExpr:
	//	INT;
	public IpByteExprElements getIpByteExprAccess() {
		return (pIpByteExpr != null) ? pIpByteExpr : (pIpByteExpr = new IpByteExprElements());
	}
	
	public ParserRule getIpByteExprRule() {
		return getIpByteExprAccess().getRule();
	}

	//IpRangeExpr:
	//	"/" INT;
	public IpRangeExprElements getIpRangeExprAccess() {
		return (pIpRangeExpr != null) ? pIpRangeExpr : (pIpRangeExpr = new IpRangeExprElements());
	}
	
	public ParserRule getIpRangeExprRule() {
		return getIpRangeExprAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
