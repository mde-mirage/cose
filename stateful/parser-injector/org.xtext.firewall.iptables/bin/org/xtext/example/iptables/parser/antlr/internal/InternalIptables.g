/*
* generated by Xtext
*/
grammar InternalIptables;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.example.iptables.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.iptables.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.iptables.services.IptablesGrammarAccess;

}

@parser::members {

 	private IptablesGrammarAccess grammarAccess;
 	
    public InternalIptablesParser(TokenStream input, IptablesGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected IptablesGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getRulesRuleParserRuleCall_0()); 
	    }
		lv_rules_0_0=ruleRule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"rules",
        		lv_rules_0_0, 
        		"Rule");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleRule
entryRuleRule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRuleRule()); }
	 iv_ruleRule=ruleRule 
	 { $current=$iv_ruleRule.current; } 
	 EOF 
;

// Rule Rule
ruleRule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRuleAccess().getDeclarationChainDeclarationParserRuleCall_0_0()); 
	    }
		lv_declaration_0_0=ruleChainDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleRule());
	        }
       		set(
       			$current, 
       			"declaration",
        		lv_declaration_0_0, 
        		"ChainDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleAccess().getFilterFilterDeclarationParserRuleCall_1_0()); 
	    }
		lv_filter_1_0=ruleFilterDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleRule());
	        }
       		set(
       			$current, 
       			"filter",
        		lv_filter_1_0, 
        		"FilterDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFilterDeclaration
entryRuleFilterDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFilterDeclarationRule()); }
	 iv_ruleFilterDeclaration=ruleFilterDeclaration 
	 { $current=$iv_ruleFilterDeclaration.current; } 
	 EOF 
;

// Rule FilterDeclaration
ruleFilterDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getFilterDeclarationAccess().getFilterFilteringSpecParserRuleCall_0()); 
	    }
		lv_filter_0_0=ruleFilteringSpec		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFilterDeclarationRule());
	        }
       		set(
       			$current, 
       			"filter",
        		lv_filter_0_0, 
        		"FilteringSpec");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleFilteringSpec
entryRuleFilteringSpec returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFilteringSpecRule()); }
	 iv_ruleFilteringSpec=ruleFilteringSpec 
	 { $current=$iv_ruleFilteringSpec.current; } 
	 EOF 
;

// Rule FilteringSpec
ruleFilteringSpec returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getFilteringSpecAccess().getFilterSpecParserRuleCall()); 
    }
    this_FilterSpec_0=ruleFilterSpec
    { 
        $current = $this_FilterSpec_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleFilterSpec
entryRuleFilterSpec returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFilterSpecRule()); }
	 iv_ruleFilterSpec=ruleFilterSpec 
	 { $current=$iv_ruleFilterSpec.current; } 
	 EOF 
;

// Rule FilterSpec
ruleFilterSpec returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='iptables' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFilterSpecAccess().getIptablesKeyword_0());
    }
(
(
(
		lv_option_1_1=	'-A' 
    {
        newLeafNode(lv_option_1_1, grammarAccess.getFilterSpecAccess().getOptionAKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFilterSpecRule());
	        }
       		setWithLastConsumed($current, "option", lv_option_1_1, null);
	    }

    |		lv_option_1_2=	'-D' 
    {
        newLeafNode(lv_option_1_2, grammarAccess.getFilterSpecAccess().getOptionDKeyword_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFilterSpecRule());
	        }
       		setWithLastConsumed($current, "option", lv_option_1_2, null);
	    }

    |		lv_option_1_3=	'-P' 
    {
        newLeafNode(lv_option_1_3, grammarAccess.getFilterSpecAccess().getOptionPKeyword_1_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFilterSpecRule());
	        }
       		setWithLastConsumed($current, "option", lv_option_1_3, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFilterSpecAccess().getChainChainParserRuleCall_2_0()); 
	    }
		lv_chain_2_0=ruleChain		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFilterSpecRule());
	        }
       		set(
       			$current, 
       			"chain",
        		lv_chain_2_0, 
        		"Chain");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='-p' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFilterSpecAccess().getPKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFilterSpecAccess().getProtocolProtocolParserRuleCall_3_1_0()); 
	    }
		lv_protocol_4_0=ruleProtocol		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFilterSpecRule());
	        }
       		set(
       			$current, 
       			"protocol",
        		lv_protocol_4_0, 
        		"Protocol");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_5='-s' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFilterSpecAccess().getSKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFilterSpecAccess().getIpIPExprParserRuleCall_4_1_0()); 
	    }
		lv_ip_6_0=ruleIPExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFilterSpecRule());
	        }
       		set(
       			$current, 
       			"ip",
        		lv_ip_6_0, 
        		"IPExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_7='-i' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getFilterSpecAccess().getIKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFilterSpecAccess().getInterfaceInterfaceParserRuleCall_5_1_0()); 
	    }
		lv_interface_8_0=ruleInterface		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFilterSpecRule());
	        }
       		set(
       			$current, 
       			"interface",
        		lv_interface_8_0, 
        		"Interface");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_9='-d' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getFilterSpecAccess().getDKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFilterSpecAccess().getIpDstIPExprParserRuleCall_6_1_0()); 
	    }
		lv_ipDst_10_0=ruleIPExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFilterSpecRule());
	        }
       		set(
       			$current, 
       			"ipDst",
        		lv_ipDst_10_0, 
        		"IPExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_11='--sport' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getFilterSpecAccess().getSportKeyword_7_0());
    }
(
(
		lv_sourcePort_12_0=RULE_INT
		{
			newLeafNode(lv_sourcePort_12_0, grammarAccess.getFilterSpecAccess().getSourcePortINTTerminalRuleCall_7_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFilterSpecRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"sourcePort",
        		lv_sourcePort_12_0, 
        		"INT");
	    }

)
))?(	otherlv_13='--dport' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getFilterSpecAccess().getDportKeyword_8_0());
    }
(
(
		lv_destinationPort_14_0=RULE_INT
		{
			newLeafNode(lv_destinationPort_14_0, grammarAccess.getFilterSpecAccess().getDestinationPortINTTerminalRuleCall_8_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFilterSpecRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"destinationPort",
        		lv_destinationPort_14_0, 
        		"INT");
	    }

)
))?(
(
		lv_neg_15_0=	'!' 
    {
        newLeafNode(lv_neg_15_0, grammarAccess.getFilterSpecAccess().getNegExclamationMarkKeyword_9_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFilterSpecRule());
	        }
       		setWithLastConsumed($current, "neg", true, "!");
	    }

)
)?(
(
		lv_syn_16_0=	'--syn' 
    {
        newLeafNode(lv_syn_16_0, grammarAccess.getFilterSpecAccess().getSynSynKeyword_10_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFilterSpecRule());
	        }
       		setWithLastConsumed($current, "syn", true, "--syn");
	    }

)
)?(	otherlv_17='-m' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getFilterSpecAccess().getMKeyword_11_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFilterSpecAccess().getMatchesMatchParserRuleCall_11_1_0()); 
	    }
		lv_matches_18_0=ruleMatch		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFilterSpecRule());
	        }
       		set(
       			$current, 
       			"matches",
        		lv_matches_18_0, 
        		"Match");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_19='--ctstate' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getFilterSpecAccess().getCtstateKeyword_12_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFilterSpecAccess().getStatesStateParserRuleCall_12_1_0()); 
	    }
		lv_states_20_0=ruleState		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFilterSpecRule());
	        }
       		add(
       			$current, 
       			"states",
        		lv_states_20_0, 
        		"State");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_21=',' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getFilterSpecAccess().getCommaKeyword_12_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFilterSpecAccess().getStatesStateParserRuleCall_12_2_1_0()); 
	    }
		lv_states_22_0=ruleState		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFilterSpecRule());
	        }
       		add(
       			$current, 
       			"states",
        		lv_states_22_0, 
        		"State");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?(	otherlv_23='--ctdir' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getFilterSpecAccess().getCtdirKeyword_13_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFilterSpecAccess().getDirDirParserRuleCall_13_1_0()); 
	    }
		lv_dir_24_0=ruleDir		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFilterSpecRule());
	        }
       		set(
       			$current, 
       			"dir",
        		lv_dir_24_0, 
        		"Dir");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_25='--ctstatus' 
    {
    	newLeafNode(otherlv_25, grammarAccess.getFilterSpecAccess().getCtstatusKeyword_14_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFilterSpecAccess().getStatusStatusParserRuleCall_14_1_0()); 
	    }
		lv_status_26_0=ruleStatus		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFilterSpecRule());
	        }
       		set(
       			$current, 
       			"status",
        		lv_status_26_0, 
        		"Status");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_27='--state' 
    {
    	newLeafNode(otherlv_27, grammarAccess.getFilterSpecAccess().getStateKeyword_15_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFilterSpecAccess().getStatesStateParserRuleCall_15_1_0()); 
	    }
		lv_states_28_0=ruleState		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFilterSpecRule());
	        }
       		add(
       			$current, 
       			"states",
        		lv_states_28_0, 
        		"State");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_29=',' 
    {
    	newLeafNode(otherlv_29, grammarAccess.getFilterSpecAccess().getCommaKeyword_15_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFilterSpecAccess().getStatesStateParserRuleCall_15_2_1_0()); 
	    }
		lv_states_30_0=ruleState		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFilterSpecRule());
	        }
       		add(
       			$current, 
       			"states",
        		lv_states_30_0, 
        		"State");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?(	otherlv_31='--tcp-flags' 
    {
    	newLeafNode(otherlv_31, grammarAccess.getFilterSpecAccess().getTcpFlagsKeyword_16_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFilterSpecAccess().getExamFlagsTCPFlagParserRuleCall_16_1_0()); 
	    }
		lv_examFlags_32_0=ruleTCPFlag		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFilterSpecRule());
	        }
       		add(
       			$current, 
       			"examFlags",
        		lv_examFlags_32_0, 
        		"TCPFlag");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_33=',' 
    {
    	newLeafNode(otherlv_33, grammarAccess.getFilterSpecAccess().getCommaKeyword_16_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFilterSpecAccess().getExamFlagsTCPFlagParserRuleCall_16_2_1_0()); 
	    }
		lv_examFlags_34_0=ruleTCPFlag		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFilterSpecRule());
	        }
       		add(
       			$current, 
       			"examFlags",
        		lv_examFlags_34_0, 
        		"TCPFlag");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getFilterSpecAccess().getFlagsTCPFlagParserRuleCall_16_3_0()); 
	    }
		lv_flags_35_0=ruleTCPFlag		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFilterSpecRule());
	        }
       		add(
       			$current, 
       			"flags",
        		lv_flags_35_0, 
        		"TCPFlag");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_36=',' 
    {
    	newLeafNode(otherlv_36, grammarAccess.getFilterSpecAccess().getCommaKeyword_16_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFilterSpecAccess().getFlagsTCPFlagParserRuleCall_16_4_1_0()); 
	    }
		lv_flags_37_0=ruleTCPFlag		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFilterSpecRule());
	        }
       		add(
       			$current, 
       			"flags",
        		lv_flags_37_0, 
        		"TCPFlag");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?(	otherlv_38='-j' 
    {
    	newLeafNode(otherlv_38, grammarAccess.getFilterSpecAccess().getJKeyword_17());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getFilterSpecAccess().getTargetTargetParserRuleCall_18_0()); 
	    }
		lv_target_39_0=ruleTarget		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFilterSpecRule());
	        }
       		set(
       			$current, 
       			"target",
        		lv_target_39_0, 
        		"Target");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_40='--log-prefix' 
    {
    	newLeafNode(otherlv_40, grammarAccess.getFilterSpecAccess().getLogPrefixKeyword_19_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFilterSpecAccess().getLpLPParserRuleCall_19_1_0()); 
	    }
		lv_lp_41_0=ruleLP		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFilterSpecRule());
	        }
       		set(
       			$current, 
       			"lp",
        		lv_lp_41_0, 
        		"LP");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleInterface
entryRuleInterface returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterfaceRule()); }
	 iv_ruleInterface=ruleInterface 
	 { $current=$iv_ruleInterface.current; } 
	 EOF 
;

// Rule Interface
ruleInterface returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getInterfaceAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInterfaceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleLP
entryRuleLP returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLPRule()); }
	 iv_ruleLP=ruleLP 
	 { $current=$iv_ruleLP.current; } 
	 EOF 
;

// Rule LP
ruleLP returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_STRING
		{
			newLeafNode(lv_name_0_0, grammarAccess.getLPAccess().getNameSTRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLPRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"STRING");
	    }

)
)
;





// Entry rule entryRuleMatch
entryRuleMatch returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMatchRule()); }
	 iv_ruleMatch=ruleMatch 
	 { $current=$iv_ruleMatch.current; } 
	 EOF 
;

// Rule Match
ruleMatch returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getMatchAccess().getNameConntrackParserRuleCall_0_0()); 
	    }
		lv_name_0_1=ruleConntrack		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMatchRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_1, 
        		"Conntrack");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getMatchAccess().getNameStateMatchParserRuleCall_0_1()); 
	    }
		lv_name_0_2=ruleStateMatch		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMatchRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_2, 
        		"StateMatch");
	        afterParserOrEnumRuleCall();
	    }

)

)
)
;





// Entry rule entryRuleDir
entryRuleDir returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDirRule()); } 
	 iv_ruleDir=ruleDir 
	 { $current=$iv_ruleDir.current.getText(); }  
	 EOF 
;

// Rule Dir
ruleDir returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getDirAccess().getIDTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleStatus
entryRuleStatus returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatusRule()); } 
	 iv_ruleStatus=ruleStatus 
	 { $current=$iv_ruleStatus.current.getText(); }  
	 EOF 
;

// Rule Status
ruleStatus returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getStatusAccess().getIDTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleConntrack
entryRuleConntrack returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getConntrackRule()); } 
	 iv_ruleConntrack=ruleConntrack 
	 { $current=$iv_ruleConntrack.current.getText(); }  
	 EOF 
;

// Rule Conntrack
ruleConntrack returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='conntrack' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConntrackAccess().getConntrackKeyword()); 
    }

    ;





// Entry rule entryRuleStateMatch
entryRuleStateMatch returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getStateMatchRule()); } 
	 iv_ruleStateMatch=ruleStateMatch 
	 { $current=$iv_ruleStateMatch.current.getText(); }  
	 EOF 
;

// Rule StateMatch
ruleStateMatch returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='State' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStateMatchAccess().getStateKeyword()); 
    }

    ;





// Entry rule entryRuleState
entryRuleState returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStateRule()); }
	 iv_ruleState=ruleState 
	 { $current=$iv_ruleState.current; } 
	 EOF 
;

// Rule State
ruleState returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getStateAccess().getNameNormalMatchStatesParserRuleCall_0_0()); 
	    }
		lv_name_0_1=ruleNormalMatchStates		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_1, 
        		"NormalMatchStates");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getStateAccess().getNameStateFulMatchStatesParserRuleCall_0_1()); 
	    }
		lv_name_0_2=ruleStateFulMatchStates		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_2, 
        		"StateFulMatchStates");
	        afterParserOrEnumRuleCall();
	    }

)

)
)
;





// Entry rule entryRuleStateFulMatchStates
entryRuleStateFulMatchStates returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getStateFulMatchStatesRule()); } 
	 iv_ruleStateFulMatchStates=ruleStateFulMatchStates 
	 { $current=$iv_ruleStateFulMatchStates.current.getText(); }  
	 EOF 
;

// Rule StateFulMatchStates
ruleStateFulMatchStates returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getStateFulMatchStatesAccess().getNoneSParserRuleCall_0()); 
    }
    this_NoneS_0=ruleNoneS    {
		$current.merge(this_NoneS_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStateFulMatchStatesAccess().getSynSentParserRuleCall_1()); 
    }
    this_SynSent_1=ruleSynSent    {
		$current.merge(this_SynSent_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStateFulMatchStatesAccess().getSynRecvParserRuleCall_2()); 
    }
    this_SynRecv_2=ruleSynRecv    {
		$current.merge(this_SynRecv_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStateFulMatchStatesAccess().getEstablishedParserRuleCall_3()); 
    }
    this_Established_3=ruleEstablished    {
		$current.merge(this_Established_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStateFulMatchStatesAccess().getFinWaitParserRuleCall_4()); 
    }
    this_FinWait_4=ruleFinWait    {
		$current.merge(this_FinWait_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStateFulMatchStatesAccess().getCloseWaitParserRuleCall_5()); 
    }
    this_CloseWait_5=ruleCloseWait    {
		$current.merge(this_CloseWait_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStateFulMatchStatesAccess().getLastAckParserRuleCall_6()); 
    }
    this_LastAck_6=ruleLastAck    {
		$current.merge(this_LastAck_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStateFulMatchStatesAccess().getTimeWaitParserRuleCall_7()); 
    }
    this_TimeWait_7=ruleTimeWait    {
		$current.merge(this_TimeWait_7);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStateFulMatchStatesAccess().getCloseParserRuleCall_8()); 
    }
    this_Close_8=ruleClose    {
		$current.merge(this_Close_8);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleNormalMatchStates
entryRuleNormalMatchStates returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNormalMatchStatesRule()); } 
	 iv_ruleNormalMatchStates=ruleNormalMatchStates 
	 { $current=$iv_ruleNormalMatchStates.current.getText(); }  
	 EOF 
;

// Rule NormalMatchStates
ruleNormalMatchStates returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getNormalMatchStatesAccess().getNewParserRuleCall()); 
    }
    this_New_0=ruleNew    {
		$current.merge(this_New_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRuleNew
entryRuleNew returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNewRule()); } 
	 iv_ruleNew=ruleNew 
	 { $current=$iv_ruleNew.current.getText(); }  
	 EOF 
;

// Rule New
ruleNew returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='NEW' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNewAccess().getNEWKeyword()); 
    }

    ;





// Entry rule entryRuleNoneS
entryRuleNoneS returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNoneSRule()); } 
	 iv_ruleNoneS=ruleNoneS 
	 { $current=$iv_ruleNoneS.current.getText(); }  
	 EOF 
;

// Rule NoneS
ruleNoneS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='NONE' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNoneSAccess().getNONEKeyword()); 
    }

    ;





// Entry rule entryRuleSynSent
entryRuleSynSent returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSynSentRule()); } 
	 iv_ruleSynSent=ruleSynSent 
	 { $current=$iv_ruleSynSent.current.getText(); }  
	 EOF 
;

// Rule SynSent
ruleSynSent returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='SYN_SENT' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSynSentAccess().getSYN_SENTKeyword()); 
    }

    ;





// Entry rule entryRuleSynRecv
entryRuleSynRecv returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSynRecvRule()); } 
	 iv_ruleSynRecv=ruleSynRecv 
	 { $current=$iv_ruleSynRecv.current.getText(); }  
	 EOF 
;

// Rule SynRecv
ruleSynRecv returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='SYN_RECV' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSynRecvAccess().getSYN_RECVKeyword()); 
    }

    ;





// Entry rule entryRuleEstablished
entryRuleEstablished returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEstablishedRule()); } 
	 iv_ruleEstablished=ruleEstablished 
	 { $current=$iv_ruleEstablished.current.getText(); }  
	 EOF 
;

// Rule Established
ruleEstablished returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='ESTABLISHED' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEstablishedAccess().getESTABLISHEDKeyword()); 
    }

    ;





// Entry rule entryRuleFinWait
entryRuleFinWait returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFinWaitRule()); } 
	 iv_ruleFinWait=ruleFinWait 
	 { $current=$iv_ruleFinWait.current.getText(); }  
	 EOF 
;

// Rule FinWait
ruleFinWait returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='FIN_WAIT' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFinWaitAccess().getFIN_WAITKeyword()); 
    }

    ;





// Entry rule entryRuleCloseWait
entryRuleCloseWait returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCloseWaitRule()); } 
	 iv_ruleCloseWait=ruleCloseWait 
	 { $current=$iv_ruleCloseWait.current.getText(); }  
	 EOF 
;

// Rule CloseWait
ruleCloseWait returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='CLOSE_WAIT' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCloseWaitAccess().getCLOSE_WAITKeyword()); 
    }

    ;





// Entry rule entryRuleLastAck
entryRuleLastAck returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLastAckRule()); } 
	 iv_ruleLastAck=ruleLastAck 
	 { $current=$iv_ruleLastAck.current.getText(); }  
	 EOF 
;

// Rule LastAck
ruleLastAck returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='LAST_ACK' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLastAckAccess().getLAST_ACKKeyword()); 
    }

    ;





// Entry rule entryRuleTimeWait
entryRuleTimeWait returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTimeWaitRule()); } 
	 iv_ruleTimeWait=ruleTimeWait 
	 { $current=$iv_ruleTimeWait.current.getText(); }  
	 EOF 
;

// Rule TimeWait
ruleTimeWait returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='TIME_WAIT' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTimeWaitAccess().getTIME_WAITKeyword()); 
    }

    ;





// Entry rule entryRuleClose
entryRuleClose returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCloseRule()); } 
	 iv_ruleClose=ruleClose 
	 { $current=$iv_ruleClose.current.getText(); }  
	 EOF 
;

// Rule Close
ruleClose returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='CLOSE' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCloseAccess().getCLOSEKeyword()); 
    }

    ;





// Entry rule entryRuleTCPFlag
entryRuleTCPFlag returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTCPFlagRule()); }
	 iv_ruleTCPFlag=ruleTCPFlag 
	 { $current=$iv_ruleTCPFlag.current; } 
	 EOF 
;

// Rule TCPFlag
ruleTCPFlag returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getTCPFlagAccess().getNameSynParserRuleCall_0_0()); 
	    }
		lv_name_0_1=ruleSyn		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTCPFlagRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_1, 
        		"Syn");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getTCPFlagAccess().getNameAckParserRuleCall_0_1()); 
	    }
		lv_name_0_2=ruleAck		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTCPFlagRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_2, 
        		"Ack");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getTCPFlagAccess().getNameFinParserRuleCall_0_2()); 
	    }
		lv_name_0_3=ruleFin		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTCPFlagRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_3, 
        		"Fin");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getTCPFlagAccess().getNameRstParserRuleCall_0_3()); 
	    }
		lv_name_0_4=ruleRst		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTCPFlagRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_4, 
        		"Rst");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getTCPFlagAccess().getNameAllParserRuleCall_0_4()); 
	    }
		lv_name_0_5=ruleAll		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTCPFlagRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_5, 
        		"All");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getTCPFlagAccess().getNameNoneParserRuleCall_0_5()); 
	    }
		lv_name_0_6=ruleNone		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTCPFlagRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_6, 
        		"None");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getTCPFlagAccess().getNamePshParserRuleCall_0_6()); 
	    }
		lv_name_0_7=rulePsh		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTCPFlagRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_7, 
        		"Psh");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getTCPFlagAccess().getNameUrgParserRuleCall_0_7()); 
	    }
		lv_name_0_8=ruleUrg		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTCPFlagRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_8, 
        		"Urg");
	        afterParserOrEnumRuleCall();
	    }

)

)
)
;





// Entry rule entryRuleSyn
entryRuleSyn returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSynRule()); } 
	 iv_ruleSyn=ruleSyn 
	 { $current=$iv_ruleSyn.current.getText(); }  
	 EOF 
;

// Rule Syn
ruleSyn returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='SYN' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSynAccess().getSYNKeyword()); 
    }

    ;





// Entry rule entryRuleAck
entryRuleAck returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAckRule()); } 
	 iv_ruleAck=ruleAck 
	 { $current=$iv_ruleAck.current.getText(); }  
	 EOF 
;

// Rule Ack
ruleAck returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='ACK' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAckAccess().getACKKeyword()); 
    }

    ;





// Entry rule entryRuleFin
entryRuleFin returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFinRule()); } 
	 iv_ruleFin=ruleFin 
	 { $current=$iv_ruleFin.current.getText(); }  
	 EOF 
;

// Rule Fin
ruleFin returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='FIN' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFinAccess().getFINKeyword()); 
    }

    ;





// Entry rule entryRuleRst
entryRuleRst returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getRstRule()); } 
	 iv_ruleRst=ruleRst 
	 { $current=$iv_ruleRst.current.getText(); }  
	 EOF 
;

// Rule Rst
ruleRst returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='RST' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRstAccess().getRSTKeyword()); 
    }

    ;





// Entry rule entryRuleAll
entryRuleAll returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAllRule()); } 
	 iv_ruleAll=ruleAll 
	 { $current=$iv_ruleAll.current.getText(); }  
	 EOF 
;

// Rule All
ruleAll returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='ALL' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAllAccess().getALLKeyword()); 
    }

    ;





// Entry rule entryRuleNone
entryRuleNone returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNoneRule()); } 
	 iv_ruleNone=ruleNone 
	 { $current=$iv_ruleNone.current.getText(); }  
	 EOF 
;

// Rule None
ruleNone returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='NONE' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNoneAccess().getNONEKeyword()); 
    }

    ;





// Entry rule entryRulePsh
entryRulePsh returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPshRule()); } 
	 iv_rulePsh=rulePsh 
	 { $current=$iv_rulePsh.current.getText(); }  
	 EOF 
;

// Rule Psh
rulePsh returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='PSH' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPshAccess().getPSHKeyword()); 
    }

    ;





// Entry rule entryRuleUrg
entryRuleUrg returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getUrgRule()); } 
	 iv_ruleUrg=ruleUrg 
	 { $current=$iv_ruleUrg.current.getText(); }  
	 EOF 
;

// Rule Urg
ruleUrg returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='URG' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUrgAccess().getURGKeyword()); 
    }

    ;





// Entry rule entryRuleProtocol
entryRuleProtocol returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getProtocolRule()); } 
	 iv_ruleProtocol=ruleProtocol 
	 { $current=$iv_ruleProtocol.current.getText(); }  
	 EOF 
;

// Rule Protocol
ruleProtocol returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getProtocolAccess().getTcpParserRuleCall_0()); 
    }
    this_Tcp_0=ruleTcp    {
		$current.merge(this_Tcp_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getProtocolAccess().getUdpParserRuleCall_1()); 
    }
    this_Udp_1=ruleUdp    {
		$current.merge(this_Udp_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getProtocolAccess().getIcmpParserRuleCall_2()); 
    }
    this_Icmp_2=ruleIcmp    {
		$current.merge(this_Icmp_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleTcp
entryRuleTcp returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTcpRule()); } 
	 iv_ruleTcp=ruleTcp 
	 { $current=$iv_ruleTcp.current.getText(); }  
	 EOF 
;

// Rule Tcp
ruleTcp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='tcp' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTcpAccess().getTcpKeyword()); 
    }

    ;





// Entry rule entryRuleUdp
entryRuleUdp returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getUdpRule()); } 
	 iv_ruleUdp=ruleUdp 
	 { $current=$iv_ruleUdp.current.getText(); }  
	 EOF 
;

// Rule Udp
ruleUdp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='udp' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUdpAccess().getUdpKeyword()); 
    }

    ;





// Entry rule entryRuleIcmp
entryRuleIcmp returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIcmpRule()); } 
	 iv_ruleIcmp=ruleIcmp 
	 { $current=$iv_ruleIcmp.current.getText(); }  
	 EOF 
;

// Rule Icmp
ruleIcmp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='icmp' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIcmpAccess().getIcmpKeyword()); 
    }

    ;





// Entry rule entryRuleTarget
entryRuleTarget returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTargetRule()); } 
	 iv_ruleTarget=ruleTarget 
	 { $current=$iv_ruleTarget.current.getText(); }  
	 EOF 
;

// Rule Target
ruleTarget returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getTargetAccess().getIDTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleChain
entryRuleChain returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getChainRule()); }
	 iv_ruleChain=ruleChain 
	 { $current=$iv_ruleChain.current; } 
	 EOF 
;

// Rule Chain
ruleChain returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_chainName_0_0=RULE_ID
		{
			newLeafNode(lv_chainName_0_0, grammarAccess.getChainAccess().getChainNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getChainRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"chainName",
        		lv_chainName_0_0, 
        		"ID");
	    }

)
)
;







// Entry rule entryRuleChainDeclaration
entryRuleChainDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getChainDeclarationRule()); }
	 iv_ruleChainDeclaration=ruleChainDeclaration 
	 { $current=$iv_ruleChainDeclaration.current; } 
	 EOF 
;

// Rule ChainDeclaration
ruleChainDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='iptables' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getChainDeclarationAccess().getIptablesKeyword_0());
    }
	otherlv_1='-N' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getChainDeclarationAccess().getNKeyword_1());
    }

    { 
        newCompositeNode(grammarAccess.getChainDeclarationAccess().getChainNameParserRuleCall_2()); 
    }
    this_ChainName_2=ruleChainName
    { 
        $current = $this_ChainName_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleChainName
entryRuleChainName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getChainNameRule()); }
	 iv_ruleChainName=ruleChainName 
	 { $current=$iv_ruleChainName.current; } 
	 EOF 
;

// Rule ChainName
ruleChainName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getChainNameAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getChainNameRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleIPExpr
entryRuleIPExpr returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIPExprRule()); } 
	 iv_ruleIPExpr=ruleIPExpr 
	 { $current=$iv_ruleIPExpr.current.getText(); }  
	 EOF 
;

// Rule IPExpr
ruleIPExpr returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getIPExprAccess().getIpByteExprParserRuleCall_0()); 
    }
    this_ipByteExpr_0=ruleipByteExpr    {
		$current.merge(this_ipByteExpr_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIPExprAccess().getFullStopKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getIPExprAccess().getIpByteExprParserRuleCall_2()); 
    }
    this_ipByteExpr_2=ruleipByteExpr    {
		$current.merge(this_ipByteExpr_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIPExprAccess().getFullStopKeyword_3()); 
    }

    { 
        newCompositeNode(grammarAccess.getIPExprAccess().getIpByteExprParserRuleCall_4()); 
    }
    this_ipByteExpr_4=ruleipByteExpr    {
		$current.merge(this_ipByteExpr_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIPExprAccess().getFullStopKeyword_5()); 
    }

    { 
        newCompositeNode(grammarAccess.getIPExprAccess().getIpByteExprParserRuleCall_6()); 
    }
    this_ipByteExpr_6=ruleipByteExpr    {
		$current.merge(this_ipByteExpr_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getIPExprAccess().getIpRangeExprParserRuleCall_7()); 
    }
    this_IpRangeExpr_7=ruleIpRangeExpr    {
		$current.merge(this_IpRangeExpr_7);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?)
    ;





// Entry rule entryRuleipByteExpr
entryRuleipByteExpr returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIpByteExprRule()); } 
	 iv_ruleipByteExpr=ruleipByteExpr 
	 { $current=$iv_ruleipByteExpr.current.getText(); }  
	 EOF 
;

// Rule ipByteExpr
ruleipByteExpr returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getIpByteExprAccess().getINTTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleIpRangeExpr
entryRuleIpRangeExpr returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIpRangeExprRule()); } 
	 iv_ruleIpRangeExpr=ruleIpRangeExpr 
	 { $current=$iv_ruleIpRangeExpr.current.getText(); }  
	 EOF 
;

// Rule IpRangeExpr
ruleIpRangeExpr returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='/' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIpRangeExprAccess().getSolidusKeyword_0()); 
    }
    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getIpRangeExprAccess().getINTTerminalRuleCall_1()); 
    }
)
    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


