/*
* generated by Xtext
*/
package org.xtext.example.iptables.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xtext.example.iptables.services.IptablesGrammarAccess;

public class IptablesParser extends AbstractContentAssistParser {
	
	@Inject
	private IptablesGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.xtext.example.iptables.ui.contentassist.antlr.internal.InternalIptablesParser createParser() {
		org.xtext.example.iptables.ui.contentassist.antlr.internal.InternalIptablesParser result = new org.xtext.example.iptables.ui.contentassist.antlr.internal.InternalIptablesParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getRuleAccess().getAlternatives(), "rule__Rule__Alternatives");
					put(grammarAccess.getFilterSpecAccess().getOptionAlternatives_1_0(), "rule__FilterSpec__OptionAlternatives_1_0");
					put(grammarAccess.getMatchAccess().getNameAlternatives_0(), "rule__Match__NameAlternatives_0");
					put(grammarAccess.getStateAccess().getNameAlternatives_0(), "rule__State__NameAlternatives_0");
					put(grammarAccess.getStateFulMatchStatesAccess().getAlternatives(), "rule__StateFulMatchStates__Alternatives");
					put(grammarAccess.getTCPFlagAccess().getNameAlternatives_0(), "rule__TCPFlag__NameAlternatives_0");
					put(grammarAccess.getProtocolAccess().getAlternatives(), "rule__Protocol__Alternatives");
					put(grammarAccess.getFilterSpecAccess().getGroup(), "rule__FilterSpec__Group__0");
					put(grammarAccess.getFilterSpecAccess().getGroup_3(), "rule__FilterSpec__Group_3__0");
					put(grammarAccess.getFilterSpecAccess().getGroup_4(), "rule__FilterSpec__Group_4__0");
					put(grammarAccess.getFilterSpecAccess().getGroup_5(), "rule__FilterSpec__Group_5__0");
					put(grammarAccess.getFilterSpecAccess().getGroup_6(), "rule__FilterSpec__Group_6__0");
					put(grammarAccess.getFilterSpecAccess().getGroup_7(), "rule__FilterSpec__Group_7__0");
					put(grammarAccess.getFilterSpecAccess().getGroup_8(), "rule__FilterSpec__Group_8__0");
					put(grammarAccess.getFilterSpecAccess().getGroup_11(), "rule__FilterSpec__Group_11__0");
					put(grammarAccess.getFilterSpecAccess().getGroup_12(), "rule__FilterSpec__Group_12__0");
					put(grammarAccess.getFilterSpecAccess().getGroup_12_2(), "rule__FilterSpec__Group_12_2__0");
					put(grammarAccess.getFilterSpecAccess().getGroup_13(), "rule__FilterSpec__Group_13__0");
					put(grammarAccess.getFilterSpecAccess().getGroup_14(), "rule__FilterSpec__Group_14__0");
					put(grammarAccess.getFilterSpecAccess().getGroup_15(), "rule__FilterSpec__Group_15__0");
					put(grammarAccess.getFilterSpecAccess().getGroup_15_2(), "rule__FilterSpec__Group_15_2__0");
					put(grammarAccess.getFilterSpecAccess().getGroup_16(), "rule__FilterSpec__Group_16__0");
					put(grammarAccess.getFilterSpecAccess().getGroup_16_2(), "rule__FilterSpec__Group_16_2__0");
					put(grammarAccess.getFilterSpecAccess().getGroup_16_4(), "rule__FilterSpec__Group_16_4__0");
					put(grammarAccess.getFilterSpecAccess().getGroup_19(), "rule__FilterSpec__Group_19__0");
					put(grammarAccess.getChainDeclarationAccess().getGroup(), "rule__ChainDeclaration__Group__0");
					put(grammarAccess.getIPExprAccess().getGroup(), "rule__IPExpr__Group__0");
					put(grammarAccess.getIpRangeExprAccess().getGroup(), "rule__IpRangeExpr__Group__0");
					put(grammarAccess.getModelAccess().getRulesAssignment(), "rule__Model__RulesAssignment");
					put(grammarAccess.getRuleAccess().getDeclarationAssignment_0(), "rule__Rule__DeclarationAssignment_0");
					put(grammarAccess.getRuleAccess().getFilterAssignment_1(), "rule__Rule__FilterAssignment_1");
					put(grammarAccess.getFilterDeclarationAccess().getFilterAssignment(), "rule__FilterDeclaration__FilterAssignment");
					put(grammarAccess.getFilterSpecAccess().getOptionAssignment_1(), "rule__FilterSpec__OptionAssignment_1");
					put(grammarAccess.getFilterSpecAccess().getChainAssignment_2(), "rule__FilterSpec__ChainAssignment_2");
					put(grammarAccess.getFilterSpecAccess().getProtocolAssignment_3_1(), "rule__FilterSpec__ProtocolAssignment_3_1");
					put(grammarAccess.getFilterSpecAccess().getIpAssignment_4_1(), "rule__FilterSpec__IpAssignment_4_1");
					put(grammarAccess.getFilterSpecAccess().getInterfaceAssignment_5_1(), "rule__FilterSpec__InterfaceAssignment_5_1");
					put(grammarAccess.getFilterSpecAccess().getIpDstAssignment_6_1(), "rule__FilterSpec__IpDstAssignment_6_1");
					put(grammarAccess.getFilterSpecAccess().getSourcePortAssignment_7_1(), "rule__FilterSpec__SourcePortAssignment_7_1");
					put(grammarAccess.getFilterSpecAccess().getDestinationPortAssignment_8_1(), "rule__FilterSpec__DestinationPortAssignment_8_1");
					put(grammarAccess.getFilterSpecAccess().getNegAssignment_9(), "rule__FilterSpec__NegAssignment_9");
					put(grammarAccess.getFilterSpecAccess().getSynAssignment_10(), "rule__FilterSpec__SynAssignment_10");
					put(grammarAccess.getFilterSpecAccess().getMatchesAssignment_11_1(), "rule__FilterSpec__MatchesAssignment_11_1");
					put(grammarAccess.getFilterSpecAccess().getStatesAssignment_12_1(), "rule__FilterSpec__StatesAssignment_12_1");
					put(grammarAccess.getFilterSpecAccess().getStatesAssignment_12_2_1(), "rule__FilterSpec__StatesAssignment_12_2_1");
					put(grammarAccess.getFilterSpecAccess().getDirAssignment_13_1(), "rule__FilterSpec__DirAssignment_13_1");
					put(grammarAccess.getFilterSpecAccess().getStatusAssignment_14_1(), "rule__FilterSpec__StatusAssignment_14_1");
					put(grammarAccess.getFilterSpecAccess().getStatesAssignment_15_1(), "rule__FilterSpec__StatesAssignment_15_1");
					put(grammarAccess.getFilterSpecAccess().getStatesAssignment_15_2_1(), "rule__FilterSpec__StatesAssignment_15_2_1");
					put(grammarAccess.getFilterSpecAccess().getExamFlagsAssignment_16_1(), "rule__FilterSpec__ExamFlagsAssignment_16_1");
					put(grammarAccess.getFilterSpecAccess().getExamFlagsAssignment_16_2_1(), "rule__FilterSpec__ExamFlagsAssignment_16_2_1");
					put(grammarAccess.getFilterSpecAccess().getFlagsAssignment_16_3(), "rule__FilterSpec__FlagsAssignment_16_3");
					put(grammarAccess.getFilterSpecAccess().getFlagsAssignment_16_4_1(), "rule__FilterSpec__FlagsAssignment_16_4_1");
					put(grammarAccess.getFilterSpecAccess().getTargetAssignment_18(), "rule__FilterSpec__TargetAssignment_18");
					put(grammarAccess.getFilterSpecAccess().getLpAssignment_19_1(), "rule__FilterSpec__LpAssignment_19_1");
					put(grammarAccess.getInterfaceAccess().getNameAssignment(), "rule__Interface__NameAssignment");
					put(grammarAccess.getLPAccess().getNameAssignment(), "rule__LP__NameAssignment");
					put(grammarAccess.getMatchAccess().getNameAssignment(), "rule__Match__NameAssignment");
					put(grammarAccess.getStateAccess().getNameAssignment(), "rule__State__NameAssignment");
					put(grammarAccess.getTCPFlagAccess().getNameAssignment(), "rule__TCPFlag__NameAssignment");
					put(grammarAccess.getChainAccess().getChainNameAssignment(), "rule__Chain__ChainNameAssignment");
					put(grammarAccess.getCustomChainAccess().getNameAssignment(), "rule__CustomChain__NameAssignment");
					put(grammarAccess.getChainNameAccess().getNameAssignment(), "rule__ChainName__NameAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xtext.example.iptables.ui.contentassist.antlr.internal.InternalIptablesParser typedParser = (org.xtext.example.iptables.ui.contentassist.antlr.internal.InternalIptablesParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public IptablesGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(IptablesGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
