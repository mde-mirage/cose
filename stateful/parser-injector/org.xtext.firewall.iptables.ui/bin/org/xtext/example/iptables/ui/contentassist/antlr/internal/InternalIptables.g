/*
* generated by Xtext
*/
grammar InternalIptables;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.xtext.example.iptables.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.iptables.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.iptables.services.IptablesGrammarAccess;

}

@parser::members {
 
 	private IptablesGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(IptablesGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getRulesAssignment()); }
(rule__Model__RulesAssignment)*
{ after(grammarAccess.getModelAccess().getRulesAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRule
entryRuleRule 
:
{ before(grammarAccess.getRuleRule()); }
	 ruleRule
{ after(grammarAccess.getRuleRule()); } 
	 EOF 
;

// Rule Rule
ruleRule
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRuleAccess().getAlternatives()); }
(rule__Rule__Alternatives)
{ after(grammarAccess.getRuleAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFilterDeclaration
entryRuleFilterDeclaration 
:
{ before(grammarAccess.getFilterDeclarationRule()); }
	 ruleFilterDeclaration
{ after(grammarAccess.getFilterDeclarationRule()); } 
	 EOF 
;

// Rule FilterDeclaration
ruleFilterDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFilterDeclarationAccess().getFilterAssignment()); }
(rule__FilterDeclaration__FilterAssignment)
{ after(grammarAccess.getFilterDeclarationAccess().getFilterAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFilteringSpec
entryRuleFilteringSpec 
:
{ before(grammarAccess.getFilteringSpecRule()); }
	 ruleFilteringSpec
{ after(grammarAccess.getFilteringSpecRule()); } 
	 EOF 
;

// Rule FilteringSpec
ruleFilteringSpec
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFilteringSpecAccess().getFilterSpecParserRuleCall()); }
	ruleFilterSpec
{ after(grammarAccess.getFilteringSpecAccess().getFilterSpecParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFilterSpec
entryRuleFilterSpec 
:
{ before(grammarAccess.getFilterSpecRule()); }
	 ruleFilterSpec
{ after(grammarAccess.getFilterSpecRule()); } 
	 EOF 
;

// Rule FilterSpec
ruleFilterSpec
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFilterSpecAccess().getGroup()); }
(rule__FilterSpec__Group__0)
{ after(grammarAccess.getFilterSpecAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInterface
entryRuleInterface 
:
{ before(grammarAccess.getInterfaceRule()); }
	 ruleInterface
{ after(grammarAccess.getInterfaceRule()); } 
	 EOF 
;

// Rule Interface
ruleInterface
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInterfaceAccess().getNameAssignment()); }
(rule__Interface__NameAssignment)
{ after(grammarAccess.getInterfaceAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLP
entryRuleLP 
:
{ before(grammarAccess.getLPRule()); }
	 ruleLP
{ after(grammarAccess.getLPRule()); } 
	 EOF 
;

// Rule LP
ruleLP
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLPAccess().getNameAssignment()); }
(rule__LP__NameAssignment)
{ after(grammarAccess.getLPAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMatch
entryRuleMatch 
:
{ before(grammarAccess.getMatchRule()); }
	 ruleMatch
{ after(grammarAccess.getMatchRule()); } 
	 EOF 
;

// Rule Match
ruleMatch
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMatchAccess().getNameAssignment()); }
(rule__Match__NameAssignment)
{ after(grammarAccess.getMatchAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDir
entryRuleDir 
:
{ before(grammarAccess.getDirRule()); }
	 ruleDir
{ after(grammarAccess.getDirRule()); } 
	 EOF 
;

// Rule Dir
ruleDir
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDirAccess().getIDTerminalRuleCall()); }
	RULE_ID
{ after(grammarAccess.getDirAccess().getIDTerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStatus
entryRuleStatus 
:
{ before(grammarAccess.getStatusRule()); }
	 ruleStatus
{ after(grammarAccess.getStatusRule()); } 
	 EOF 
;

// Rule Status
ruleStatus
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStatusAccess().getIDTerminalRuleCall()); }
	RULE_ID
{ after(grammarAccess.getStatusAccess().getIDTerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConntrack
entryRuleConntrack 
:
{ before(grammarAccess.getConntrackRule()); }
	 ruleConntrack
{ after(grammarAccess.getConntrackRule()); } 
	 EOF 
;

// Rule Conntrack
ruleConntrack
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConntrackAccess().getConntrackKeyword()); }

	'conntrack' 

{ after(grammarAccess.getConntrackAccess().getConntrackKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStateMatch
entryRuleStateMatch 
:
{ before(grammarAccess.getStateMatchRule()); }
	 ruleStateMatch
{ after(grammarAccess.getStateMatchRule()); } 
	 EOF 
;

// Rule StateMatch
ruleStateMatch
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStateMatchAccess().getStateKeyword()); }

	'State' 

{ after(grammarAccess.getStateMatchAccess().getStateKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleState
entryRuleState 
:
{ before(grammarAccess.getStateRule()); }
	 ruleState
{ after(grammarAccess.getStateRule()); } 
	 EOF 
;

// Rule State
ruleState
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStateAccess().getNameAssignment()); }
(rule__State__NameAssignment)
{ after(grammarAccess.getStateAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStateFulMatchStates
entryRuleStateFulMatchStates 
:
{ before(grammarAccess.getStateFulMatchStatesRule()); }
	 ruleStateFulMatchStates
{ after(grammarAccess.getStateFulMatchStatesRule()); } 
	 EOF 
;

// Rule StateFulMatchStates
ruleStateFulMatchStates
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStateFulMatchStatesAccess().getAlternatives()); }
(rule__StateFulMatchStates__Alternatives)
{ after(grammarAccess.getStateFulMatchStatesAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNormalMatchStates
entryRuleNormalMatchStates 
:
{ before(grammarAccess.getNormalMatchStatesRule()); }
	 ruleNormalMatchStates
{ after(grammarAccess.getNormalMatchStatesRule()); } 
	 EOF 
;

// Rule NormalMatchStates
ruleNormalMatchStates
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNormalMatchStatesAccess().getNewParserRuleCall()); }
	ruleNew
{ after(grammarAccess.getNormalMatchStatesAccess().getNewParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNew
entryRuleNew 
:
{ before(grammarAccess.getNewRule()); }
	 ruleNew
{ after(grammarAccess.getNewRule()); } 
	 EOF 
;

// Rule New
ruleNew
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNewAccess().getNEWKeyword()); }

	'NEW' 

{ after(grammarAccess.getNewAccess().getNEWKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNoneS
entryRuleNoneS 
:
{ before(grammarAccess.getNoneSRule()); }
	 ruleNoneS
{ after(grammarAccess.getNoneSRule()); } 
	 EOF 
;

// Rule NoneS
ruleNoneS
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNoneSAccess().getNONEKeyword()); }

	'NONE' 

{ after(grammarAccess.getNoneSAccess().getNONEKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSynSent
entryRuleSynSent 
:
{ before(grammarAccess.getSynSentRule()); }
	 ruleSynSent
{ after(grammarAccess.getSynSentRule()); } 
	 EOF 
;

// Rule SynSent
ruleSynSent
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSynSentAccess().getSYN_SENTKeyword()); }

	'SYN_SENT' 

{ after(grammarAccess.getSynSentAccess().getSYN_SENTKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSynRecv
entryRuleSynRecv 
:
{ before(grammarAccess.getSynRecvRule()); }
	 ruleSynRecv
{ after(grammarAccess.getSynRecvRule()); } 
	 EOF 
;

// Rule SynRecv
ruleSynRecv
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSynRecvAccess().getSYN_RECVKeyword()); }

	'SYN_RECV' 

{ after(grammarAccess.getSynRecvAccess().getSYN_RECVKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEstablished
entryRuleEstablished 
:
{ before(grammarAccess.getEstablishedRule()); }
	 ruleEstablished
{ after(grammarAccess.getEstablishedRule()); } 
	 EOF 
;

// Rule Established
ruleEstablished
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEstablishedAccess().getESTABLISHEDKeyword()); }

	'ESTABLISHED' 

{ after(grammarAccess.getEstablishedAccess().getESTABLISHEDKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFinWait
entryRuleFinWait 
:
{ before(grammarAccess.getFinWaitRule()); }
	 ruleFinWait
{ after(grammarAccess.getFinWaitRule()); } 
	 EOF 
;

// Rule FinWait
ruleFinWait
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFinWaitAccess().getFIN_WAITKeyword()); }

	'FIN_WAIT' 

{ after(grammarAccess.getFinWaitAccess().getFIN_WAITKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCloseWait
entryRuleCloseWait 
:
{ before(grammarAccess.getCloseWaitRule()); }
	 ruleCloseWait
{ after(grammarAccess.getCloseWaitRule()); } 
	 EOF 
;

// Rule CloseWait
ruleCloseWait
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCloseWaitAccess().getCLOSE_WAITKeyword()); }

	'CLOSE_WAIT' 

{ after(grammarAccess.getCloseWaitAccess().getCLOSE_WAITKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLastAck
entryRuleLastAck 
:
{ before(grammarAccess.getLastAckRule()); }
	 ruleLastAck
{ after(grammarAccess.getLastAckRule()); } 
	 EOF 
;

// Rule LastAck
ruleLastAck
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLastAckAccess().getLAST_ACKKeyword()); }

	'LAST_ACK' 

{ after(grammarAccess.getLastAckAccess().getLAST_ACKKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTimeWait
entryRuleTimeWait 
:
{ before(grammarAccess.getTimeWaitRule()); }
	 ruleTimeWait
{ after(grammarAccess.getTimeWaitRule()); } 
	 EOF 
;

// Rule TimeWait
ruleTimeWait
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTimeWaitAccess().getTIME_WAITKeyword()); }

	'TIME_WAIT' 

{ after(grammarAccess.getTimeWaitAccess().getTIME_WAITKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleClose
entryRuleClose 
:
{ before(grammarAccess.getCloseRule()); }
	 ruleClose
{ after(grammarAccess.getCloseRule()); } 
	 EOF 
;

// Rule Close
ruleClose
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCloseAccess().getCLOSEKeyword()); }

	'CLOSE' 

{ after(grammarAccess.getCloseAccess().getCLOSEKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTCPFlag
entryRuleTCPFlag 
:
{ before(grammarAccess.getTCPFlagRule()); }
	 ruleTCPFlag
{ after(grammarAccess.getTCPFlagRule()); } 
	 EOF 
;

// Rule TCPFlag
ruleTCPFlag
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTCPFlagAccess().getNameAssignment()); }
(rule__TCPFlag__NameAssignment)
{ after(grammarAccess.getTCPFlagAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSyn
entryRuleSyn 
:
{ before(grammarAccess.getSynRule()); }
	 ruleSyn
{ after(grammarAccess.getSynRule()); } 
	 EOF 
;

// Rule Syn
ruleSyn
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSynAccess().getSYNKeyword()); }

	'SYN' 

{ after(grammarAccess.getSynAccess().getSYNKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAck
entryRuleAck 
:
{ before(grammarAccess.getAckRule()); }
	 ruleAck
{ after(grammarAccess.getAckRule()); } 
	 EOF 
;

// Rule Ack
ruleAck
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAckAccess().getACKKeyword()); }

	'ACK' 

{ after(grammarAccess.getAckAccess().getACKKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFin
entryRuleFin 
:
{ before(grammarAccess.getFinRule()); }
	 ruleFin
{ after(grammarAccess.getFinRule()); } 
	 EOF 
;

// Rule Fin
ruleFin
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFinAccess().getFINKeyword()); }

	'FIN' 

{ after(grammarAccess.getFinAccess().getFINKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRst
entryRuleRst 
:
{ before(grammarAccess.getRstRule()); }
	 ruleRst
{ after(grammarAccess.getRstRule()); } 
	 EOF 
;

// Rule Rst
ruleRst
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRstAccess().getRSTKeyword()); }

	'RST' 

{ after(grammarAccess.getRstAccess().getRSTKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAll
entryRuleAll 
:
{ before(grammarAccess.getAllRule()); }
	 ruleAll
{ after(grammarAccess.getAllRule()); } 
	 EOF 
;

// Rule All
ruleAll
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAllAccess().getALLKeyword()); }

	'ALL' 

{ after(grammarAccess.getAllAccess().getALLKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNone
entryRuleNone 
:
{ before(grammarAccess.getNoneRule()); }
	 ruleNone
{ after(grammarAccess.getNoneRule()); } 
	 EOF 
;

// Rule None
ruleNone
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNoneAccess().getNONEKeyword()); }

	'NONE' 

{ after(grammarAccess.getNoneAccess().getNONEKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePsh
entryRulePsh 
:
{ before(grammarAccess.getPshRule()); }
	 rulePsh
{ after(grammarAccess.getPshRule()); } 
	 EOF 
;

// Rule Psh
rulePsh
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPshAccess().getPSHKeyword()); }

	'PSH' 

{ after(grammarAccess.getPshAccess().getPSHKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUrg
entryRuleUrg 
:
{ before(grammarAccess.getUrgRule()); }
	 ruleUrg
{ after(grammarAccess.getUrgRule()); } 
	 EOF 
;

// Rule Urg
ruleUrg
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUrgAccess().getURGKeyword()); }

	'URG' 

{ after(grammarAccess.getUrgAccess().getURGKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProtocol
entryRuleProtocol 
:
{ before(grammarAccess.getProtocolRule()); }
	 ruleProtocol
{ after(grammarAccess.getProtocolRule()); } 
	 EOF 
;

// Rule Protocol
ruleProtocol
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProtocolAccess().getAlternatives()); }
(rule__Protocol__Alternatives)
{ after(grammarAccess.getProtocolAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTcp
entryRuleTcp 
:
{ before(grammarAccess.getTcpRule()); }
	 ruleTcp
{ after(grammarAccess.getTcpRule()); } 
	 EOF 
;

// Rule Tcp
ruleTcp
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTcpAccess().getTcpKeyword()); }

	'tcp' 

{ after(grammarAccess.getTcpAccess().getTcpKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUdp
entryRuleUdp 
:
{ before(grammarAccess.getUdpRule()); }
	 ruleUdp
{ after(grammarAccess.getUdpRule()); } 
	 EOF 
;

// Rule Udp
ruleUdp
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUdpAccess().getUdpKeyword()); }

	'udp' 

{ after(grammarAccess.getUdpAccess().getUdpKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIcmp
entryRuleIcmp 
:
{ before(grammarAccess.getIcmpRule()); }
	 ruleIcmp
{ after(grammarAccess.getIcmpRule()); } 
	 EOF 
;

// Rule Icmp
ruleIcmp
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIcmpAccess().getIcmpKeyword()); }

	'icmp' 

{ after(grammarAccess.getIcmpAccess().getIcmpKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTarget
entryRuleTarget 
:
{ before(grammarAccess.getTargetRule()); }
	 ruleTarget
{ after(grammarAccess.getTargetRule()); } 
	 EOF 
;

// Rule Target
ruleTarget
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTargetAccess().getIDTerminalRuleCall()); }
	RULE_ID
{ after(grammarAccess.getTargetAccess().getIDTerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleChain
entryRuleChain 
:
{ before(grammarAccess.getChainRule()); }
	 ruleChain
{ after(grammarAccess.getChainRule()); } 
	 EOF 
;

// Rule Chain
ruleChain
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getChainAccess().getChainNameAssignment()); }
(rule__Chain__ChainNameAssignment)
{ after(grammarAccess.getChainAccess().getChainNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleChainDeclaration
entryRuleChainDeclaration 
:
{ before(grammarAccess.getChainDeclarationRule()); }
	 ruleChainDeclaration
{ after(grammarAccess.getChainDeclarationRule()); } 
	 EOF 
;

// Rule ChainDeclaration
ruleChainDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getChainDeclarationAccess().getGroup()); }
(rule__ChainDeclaration__Group__0)
{ after(grammarAccess.getChainDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleChainName
entryRuleChainName 
:
{ before(grammarAccess.getChainNameRule()); }
	 ruleChainName
{ after(grammarAccess.getChainNameRule()); } 
	 EOF 
;

// Rule ChainName
ruleChainName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getChainNameAccess().getNameAssignment()); }
(rule__ChainName__NameAssignment)
{ after(grammarAccess.getChainNameAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIPExpr
entryRuleIPExpr 
:
{ before(grammarAccess.getIPExprRule()); }
	 ruleIPExpr
{ after(grammarAccess.getIPExprRule()); } 
	 EOF 
;

// Rule IPExpr
ruleIPExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIPExprAccess().getGroup()); }
(rule__IPExpr__Group__0)
{ after(grammarAccess.getIPExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleipByteExpr
entryRuleipByteExpr 
:
{ before(grammarAccess.getIpByteExprRule()); }
	 ruleipByteExpr
{ after(grammarAccess.getIpByteExprRule()); } 
	 EOF 
;

// Rule ipByteExpr
ruleipByteExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIpByteExprAccess().getINTTerminalRuleCall()); }
	RULE_INT
{ after(grammarAccess.getIpByteExprAccess().getINTTerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIpRangeExpr
entryRuleIpRangeExpr 
:
{ before(grammarAccess.getIpRangeExprRule()); }
	 ruleIpRangeExpr
{ after(grammarAccess.getIpRangeExprRule()); } 
	 EOF 
;

// Rule IpRangeExpr
ruleIpRangeExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIpRangeExprAccess().getGroup()); }
(rule__IpRangeExpr__Group__0)
{ after(grammarAccess.getIpRangeExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Rule__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getDeclarationAssignment_0()); }
(rule__Rule__DeclarationAssignment_0)
{ after(grammarAccess.getRuleAccess().getDeclarationAssignment_0()); }
)

    |(
{ before(grammarAccess.getRuleAccess().getFilterAssignment_1()); }
(rule__Rule__FilterAssignment_1)
{ after(grammarAccess.getRuleAccess().getFilterAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__OptionAlternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getOptionAKeyword_1_0_0()); }

	'-A' 

{ after(grammarAccess.getFilterSpecAccess().getOptionAKeyword_1_0_0()); }
)

    |(
{ before(grammarAccess.getFilterSpecAccess().getOptionDKeyword_1_0_1()); }

	'-D' 

{ after(grammarAccess.getFilterSpecAccess().getOptionDKeyword_1_0_1()); }
)

    |(
{ before(grammarAccess.getFilterSpecAccess().getOptionPKeyword_1_0_2()); }

	'-P' 

{ after(grammarAccess.getFilterSpecAccess().getOptionPKeyword_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Match__NameAlternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMatchAccess().getNameConntrackParserRuleCall_0_0()); }
	ruleConntrack
{ after(grammarAccess.getMatchAccess().getNameConntrackParserRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getMatchAccess().getNameStateMatchParserRuleCall_0_1()); }
	ruleStateMatch
{ after(grammarAccess.getMatchAccess().getNameStateMatchParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__State__NameAlternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getNameNormalMatchStatesParserRuleCall_0_0()); }
	ruleNormalMatchStates
{ after(grammarAccess.getStateAccess().getNameNormalMatchStatesParserRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getStateAccess().getNameStateFulMatchStatesParserRuleCall_0_1()); }
	ruleStateFulMatchStates
{ after(grammarAccess.getStateAccess().getNameStateFulMatchStatesParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StateFulMatchStates__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateFulMatchStatesAccess().getNoneSParserRuleCall_0()); }
	ruleNoneS
{ after(grammarAccess.getStateFulMatchStatesAccess().getNoneSParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getStateFulMatchStatesAccess().getSynSentParserRuleCall_1()); }
	ruleSynSent
{ after(grammarAccess.getStateFulMatchStatesAccess().getSynSentParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getStateFulMatchStatesAccess().getSynRecvParserRuleCall_2()); }
	ruleSynRecv
{ after(grammarAccess.getStateFulMatchStatesAccess().getSynRecvParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getStateFulMatchStatesAccess().getEstablishedParserRuleCall_3()); }
	ruleEstablished
{ after(grammarAccess.getStateFulMatchStatesAccess().getEstablishedParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getStateFulMatchStatesAccess().getFinWaitParserRuleCall_4()); }
	ruleFinWait
{ after(grammarAccess.getStateFulMatchStatesAccess().getFinWaitParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getStateFulMatchStatesAccess().getCloseWaitParserRuleCall_5()); }
	ruleCloseWait
{ after(grammarAccess.getStateFulMatchStatesAccess().getCloseWaitParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getStateFulMatchStatesAccess().getLastAckParserRuleCall_6()); }
	ruleLastAck
{ after(grammarAccess.getStateFulMatchStatesAccess().getLastAckParserRuleCall_6()); }
)

    |(
{ before(grammarAccess.getStateFulMatchStatesAccess().getTimeWaitParserRuleCall_7()); }
	ruleTimeWait
{ after(grammarAccess.getStateFulMatchStatesAccess().getTimeWaitParserRuleCall_7()); }
)

    |(
{ before(grammarAccess.getStateFulMatchStatesAccess().getCloseParserRuleCall_8()); }
	ruleClose
{ after(grammarAccess.getStateFulMatchStatesAccess().getCloseParserRuleCall_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TCPFlag__NameAlternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTCPFlagAccess().getNameSynParserRuleCall_0_0()); }
	ruleSyn
{ after(grammarAccess.getTCPFlagAccess().getNameSynParserRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getTCPFlagAccess().getNameAckParserRuleCall_0_1()); }
	ruleAck
{ after(grammarAccess.getTCPFlagAccess().getNameAckParserRuleCall_0_1()); }
)

    |(
{ before(grammarAccess.getTCPFlagAccess().getNameFinParserRuleCall_0_2()); }
	ruleFin
{ after(grammarAccess.getTCPFlagAccess().getNameFinParserRuleCall_0_2()); }
)

    |(
{ before(grammarAccess.getTCPFlagAccess().getNameRstParserRuleCall_0_3()); }
	ruleRst
{ after(grammarAccess.getTCPFlagAccess().getNameRstParserRuleCall_0_3()); }
)

    |(
{ before(grammarAccess.getTCPFlagAccess().getNameAllParserRuleCall_0_4()); }
	ruleAll
{ after(grammarAccess.getTCPFlagAccess().getNameAllParserRuleCall_0_4()); }
)

    |(
{ before(grammarAccess.getTCPFlagAccess().getNameNoneParserRuleCall_0_5()); }
	ruleNone
{ after(grammarAccess.getTCPFlagAccess().getNameNoneParserRuleCall_0_5()); }
)

    |(
{ before(grammarAccess.getTCPFlagAccess().getNamePshParserRuleCall_0_6()); }
	rulePsh
{ after(grammarAccess.getTCPFlagAccess().getNamePshParserRuleCall_0_6()); }
)

    |(
{ before(grammarAccess.getTCPFlagAccess().getNameUrgParserRuleCall_0_7()); }
	ruleUrg
{ after(grammarAccess.getTCPFlagAccess().getNameUrgParserRuleCall_0_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Protocol__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProtocolAccess().getTcpParserRuleCall_0()); }
	ruleTcp
{ after(grammarAccess.getProtocolAccess().getTcpParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getProtocolAccess().getUdpParserRuleCall_1()); }
	ruleUdp
{ after(grammarAccess.getProtocolAccess().getUdpParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getProtocolAccess().getIcmpParserRuleCall_2()); }
	ruleIcmp
{ after(grammarAccess.getProtocolAccess().getIcmpParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__FilterSpec__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FilterSpec__Group__0__Impl
	rule__FilterSpec__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getIptablesKeyword_0()); }

	'iptables' 

{ after(grammarAccess.getFilterSpecAccess().getIptablesKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FilterSpec__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FilterSpec__Group__1__Impl
	rule__FilterSpec__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getOptionAssignment_1()); }
(rule__FilterSpec__OptionAssignment_1)
{ after(grammarAccess.getFilterSpecAccess().getOptionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FilterSpec__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FilterSpec__Group__2__Impl
	rule__FilterSpec__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getChainAssignment_2()); }
(rule__FilterSpec__ChainAssignment_2)
{ after(grammarAccess.getFilterSpecAccess().getChainAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FilterSpec__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FilterSpec__Group__3__Impl
	rule__FilterSpec__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getGroup_3()); }
(rule__FilterSpec__Group_3__0)?
{ after(grammarAccess.getFilterSpecAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FilterSpec__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FilterSpec__Group__4__Impl
	rule__FilterSpec__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getGroup_4()); }
(rule__FilterSpec__Group_4__0)?
{ after(grammarAccess.getFilterSpecAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FilterSpec__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FilterSpec__Group__5__Impl
	rule__FilterSpec__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getGroup_5()); }
(rule__FilterSpec__Group_5__0)?
{ after(grammarAccess.getFilterSpecAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FilterSpec__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FilterSpec__Group__6__Impl
	rule__FilterSpec__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getGroup_6()); }
(rule__FilterSpec__Group_6__0)?
{ after(grammarAccess.getFilterSpecAccess().getGroup_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FilterSpec__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FilterSpec__Group__7__Impl
	rule__FilterSpec__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getGroup_7()); }
(rule__FilterSpec__Group_7__0)?
{ after(grammarAccess.getFilterSpecAccess().getGroup_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FilterSpec__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FilterSpec__Group__8__Impl
	rule__FilterSpec__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getGroup_8()); }
(rule__FilterSpec__Group_8__0)?
{ after(grammarAccess.getFilterSpecAccess().getGroup_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FilterSpec__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FilterSpec__Group__9__Impl
	rule__FilterSpec__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getNegAssignment_9()); }
(rule__FilterSpec__NegAssignment_9)?
{ after(grammarAccess.getFilterSpecAccess().getNegAssignment_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FilterSpec__Group__10
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FilterSpec__Group__10__Impl
	rule__FilterSpec__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__Group__10__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getSynAssignment_10()); }
(rule__FilterSpec__SynAssignment_10)?
{ after(grammarAccess.getFilterSpecAccess().getSynAssignment_10()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FilterSpec__Group__11
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FilterSpec__Group__11__Impl
	rule__FilterSpec__Group__12
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__Group__11__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getGroup_11()); }
(rule__FilterSpec__Group_11__0)?
{ after(grammarAccess.getFilterSpecAccess().getGroup_11()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FilterSpec__Group__12
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FilterSpec__Group__12__Impl
	rule__FilterSpec__Group__13
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__Group__12__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getGroup_12()); }
(rule__FilterSpec__Group_12__0)?
{ after(grammarAccess.getFilterSpecAccess().getGroup_12()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FilterSpec__Group__13
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FilterSpec__Group__13__Impl
	rule__FilterSpec__Group__14
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__Group__13__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getGroup_13()); }
(rule__FilterSpec__Group_13__0)?
{ after(grammarAccess.getFilterSpecAccess().getGroup_13()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FilterSpec__Group__14
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FilterSpec__Group__14__Impl
	rule__FilterSpec__Group__15
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__Group__14__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getGroup_14()); }
(rule__FilterSpec__Group_14__0)?
{ after(grammarAccess.getFilterSpecAccess().getGroup_14()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FilterSpec__Group__15
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FilterSpec__Group__15__Impl
	rule__FilterSpec__Group__16
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__Group__15__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getGroup_15()); }
(rule__FilterSpec__Group_15__0)?
{ after(grammarAccess.getFilterSpecAccess().getGroup_15()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FilterSpec__Group__16
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FilterSpec__Group__16__Impl
	rule__FilterSpec__Group__17
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__Group__16__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getGroup_16()); }
(rule__FilterSpec__Group_16__0)?
{ after(grammarAccess.getFilterSpecAccess().getGroup_16()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FilterSpec__Group__17
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FilterSpec__Group__17__Impl
	rule__FilterSpec__Group__18
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__Group__17__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getJKeyword_17()); }
(
	'-j' 
)?
{ after(grammarAccess.getFilterSpecAccess().getJKeyword_17()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FilterSpec__Group__18
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FilterSpec__Group__18__Impl
	rule__FilterSpec__Group__19
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__Group__18__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getTargetAssignment_18()); }
(rule__FilterSpec__TargetAssignment_18)
{ after(grammarAccess.getFilterSpecAccess().getTargetAssignment_18()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FilterSpec__Group__19
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FilterSpec__Group__19__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__Group__19__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getGroup_19()); }
(rule__FilterSpec__Group_19__0)?
{ after(grammarAccess.getFilterSpecAccess().getGroup_19()); }
)

;
finally {
	restoreStackSize(stackSize);
}










































rule__FilterSpec__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FilterSpec__Group_3__0__Impl
	rule__FilterSpec__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getPKeyword_3_0()); }

	'-p' 

{ after(grammarAccess.getFilterSpecAccess().getPKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FilterSpec__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FilterSpec__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getProtocolAssignment_3_1()); }
(rule__FilterSpec__ProtocolAssignment_3_1)
{ after(grammarAccess.getFilterSpecAccess().getProtocolAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FilterSpec__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FilterSpec__Group_4__0__Impl
	rule__FilterSpec__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getSKeyword_4_0()); }

	'-s' 

{ after(grammarAccess.getFilterSpecAccess().getSKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FilterSpec__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FilterSpec__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getIpAssignment_4_1()); }
(rule__FilterSpec__IpAssignment_4_1)
{ after(grammarAccess.getFilterSpecAccess().getIpAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FilterSpec__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FilterSpec__Group_5__0__Impl
	rule__FilterSpec__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getIKeyword_5_0()); }

	'-i' 

{ after(grammarAccess.getFilterSpecAccess().getIKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FilterSpec__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FilterSpec__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getInterfaceAssignment_5_1()); }
(rule__FilterSpec__InterfaceAssignment_5_1)
{ after(grammarAccess.getFilterSpecAccess().getInterfaceAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FilterSpec__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FilterSpec__Group_6__0__Impl
	rule__FilterSpec__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getDKeyword_6_0()); }

	'-d' 

{ after(grammarAccess.getFilterSpecAccess().getDKeyword_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FilterSpec__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FilterSpec__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getIpDstAssignment_6_1()); }
(rule__FilterSpec__IpDstAssignment_6_1)
{ after(grammarAccess.getFilterSpecAccess().getIpDstAssignment_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FilterSpec__Group_7__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FilterSpec__Group_7__0__Impl
	rule__FilterSpec__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__Group_7__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getSportKeyword_7_0()); }

	'--sport' 

{ after(grammarAccess.getFilterSpecAccess().getSportKeyword_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FilterSpec__Group_7__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FilterSpec__Group_7__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__Group_7__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getSourcePortAssignment_7_1()); }
(rule__FilterSpec__SourcePortAssignment_7_1)
{ after(grammarAccess.getFilterSpecAccess().getSourcePortAssignment_7_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FilterSpec__Group_8__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FilterSpec__Group_8__0__Impl
	rule__FilterSpec__Group_8__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__Group_8__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getDportKeyword_8_0()); }

	'--dport' 

{ after(grammarAccess.getFilterSpecAccess().getDportKeyword_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FilterSpec__Group_8__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FilterSpec__Group_8__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__Group_8__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getDestinationPortAssignment_8_1()); }
(rule__FilterSpec__DestinationPortAssignment_8_1)
{ after(grammarAccess.getFilterSpecAccess().getDestinationPortAssignment_8_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FilterSpec__Group_11__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FilterSpec__Group_11__0__Impl
	rule__FilterSpec__Group_11__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__Group_11__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getMKeyword_11_0()); }

	'-m' 

{ after(grammarAccess.getFilterSpecAccess().getMKeyword_11_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FilterSpec__Group_11__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FilterSpec__Group_11__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__Group_11__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getMatchesAssignment_11_1()); }
(rule__FilterSpec__MatchesAssignment_11_1)
{ after(grammarAccess.getFilterSpecAccess().getMatchesAssignment_11_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FilterSpec__Group_12__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FilterSpec__Group_12__0__Impl
	rule__FilterSpec__Group_12__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__Group_12__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getCtstateKeyword_12_0()); }

	'--ctstate' 

{ after(grammarAccess.getFilterSpecAccess().getCtstateKeyword_12_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FilterSpec__Group_12__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FilterSpec__Group_12__1__Impl
	rule__FilterSpec__Group_12__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__Group_12__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getStatesAssignment_12_1()); }
(rule__FilterSpec__StatesAssignment_12_1)
{ after(grammarAccess.getFilterSpecAccess().getStatesAssignment_12_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FilterSpec__Group_12__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FilterSpec__Group_12__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__Group_12__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getGroup_12_2()); }
(rule__FilterSpec__Group_12_2__0)*
{ after(grammarAccess.getFilterSpecAccess().getGroup_12_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FilterSpec__Group_12_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FilterSpec__Group_12_2__0__Impl
	rule__FilterSpec__Group_12_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__Group_12_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getCommaKeyword_12_2_0()); }

	',' 

{ after(grammarAccess.getFilterSpecAccess().getCommaKeyword_12_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FilterSpec__Group_12_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FilterSpec__Group_12_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__Group_12_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getStatesAssignment_12_2_1()); }
(rule__FilterSpec__StatesAssignment_12_2_1)
{ after(grammarAccess.getFilterSpecAccess().getStatesAssignment_12_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FilterSpec__Group_13__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FilterSpec__Group_13__0__Impl
	rule__FilterSpec__Group_13__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__Group_13__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getCtdirKeyword_13_0()); }

	'--ctdir' 

{ after(grammarAccess.getFilterSpecAccess().getCtdirKeyword_13_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FilterSpec__Group_13__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FilterSpec__Group_13__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__Group_13__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getDirAssignment_13_1()); }
(rule__FilterSpec__DirAssignment_13_1)
{ after(grammarAccess.getFilterSpecAccess().getDirAssignment_13_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FilterSpec__Group_14__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FilterSpec__Group_14__0__Impl
	rule__FilterSpec__Group_14__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__Group_14__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getCtstatusKeyword_14_0()); }

	'--ctstatus' 

{ after(grammarAccess.getFilterSpecAccess().getCtstatusKeyword_14_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FilterSpec__Group_14__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FilterSpec__Group_14__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__Group_14__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getStatusAssignment_14_1()); }
(rule__FilterSpec__StatusAssignment_14_1)
{ after(grammarAccess.getFilterSpecAccess().getStatusAssignment_14_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FilterSpec__Group_15__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FilterSpec__Group_15__0__Impl
	rule__FilterSpec__Group_15__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__Group_15__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getStateKeyword_15_0()); }

	'--state' 

{ after(grammarAccess.getFilterSpecAccess().getStateKeyword_15_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FilterSpec__Group_15__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FilterSpec__Group_15__1__Impl
	rule__FilterSpec__Group_15__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__Group_15__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getStatesAssignment_15_1()); }
(rule__FilterSpec__StatesAssignment_15_1)
{ after(grammarAccess.getFilterSpecAccess().getStatesAssignment_15_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FilterSpec__Group_15__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FilterSpec__Group_15__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__Group_15__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getGroup_15_2()); }
(rule__FilterSpec__Group_15_2__0)*
{ after(grammarAccess.getFilterSpecAccess().getGroup_15_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FilterSpec__Group_15_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FilterSpec__Group_15_2__0__Impl
	rule__FilterSpec__Group_15_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__Group_15_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getCommaKeyword_15_2_0()); }

	',' 

{ after(grammarAccess.getFilterSpecAccess().getCommaKeyword_15_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FilterSpec__Group_15_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FilterSpec__Group_15_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__Group_15_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getStatesAssignment_15_2_1()); }
(rule__FilterSpec__StatesAssignment_15_2_1)
{ after(grammarAccess.getFilterSpecAccess().getStatesAssignment_15_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FilterSpec__Group_16__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FilterSpec__Group_16__0__Impl
	rule__FilterSpec__Group_16__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__Group_16__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getTcpFlagsKeyword_16_0()); }

	'--tcp-flags' 

{ after(grammarAccess.getFilterSpecAccess().getTcpFlagsKeyword_16_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FilterSpec__Group_16__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FilterSpec__Group_16__1__Impl
	rule__FilterSpec__Group_16__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__Group_16__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getExamFlagsAssignment_16_1()); }
(rule__FilterSpec__ExamFlagsAssignment_16_1)
{ after(grammarAccess.getFilterSpecAccess().getExamFlagsAssignment_16_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FilterSpec__Group_16__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FilterSpec__Group_16__2__Impl
	rule__FilterSpec__Group_16__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__Group_16__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getGroup_16_2()); }
(rule__FilterSpec__Group_16_2__0)*
{ after(grammarAccess.getFilterSpecAccess().getGroup_16_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FilterSpec__Group_16__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FilterSpec__Group_16__3__Impl
	rule__FilterSpec__Group_16__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__Group_16__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getFlagsAssignment_16_3()); }
(rule__FilterSpec__FlagsAssignment_16_3)
{ after(grammarAccess.getFilterSpecAccess().getFlagsAssignment_16_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FilterSpec__Group_16__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FilterSpec__Group_16__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__Group_16__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getGroup_16_4()); }
(rule__FilterSpec__Group_16_4__0)*
{ after(grammarAccess.getFilterSpecAccess().getGroup_16_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__FilterSpec__Group_16_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FilterSpec__Group_16_2__0__Impl
	rule__FilterSpec__Group_16_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__Group_16_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getCommaKeyword_16_2_0()); }

	',' 

{ after(grammarAccess.getFilterSpecAccess().getCommaKeyword_16_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FilterSpec__Group_16_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FilterSpec__Group_16_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__Group_16_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getExamFlagsAssignment_16_2_1()); }
(rule__FilterSpec__ExamFlagsAssignment_16_2_1)
{ after(grammarAccess.getFilterSpecAccess().getExamFlagsAssignment_16_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FilterSpec__Group_16_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FilterSpec__Group_16_4__0__Impl
	rule__FilterSpec__Group_16_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__Group_16_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getCommaKeyword_16_4_0()); }

	',' 

{ after(grammarAccess.getFilterSpecAccess().getCommaKeyword_16_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FilterSpec__Group_16_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FilterSpec__Group_16_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__Group_16_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getFlagsAssignment_16_4_1()); }
(rule__FilterSpec__FlagsAssignment_16_4_1)
{ after(grammarAccess.getFilterSpecAccess().getFlagsAssignment_16_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FilterSpec__Group_19__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FilterSpec__Group_19__0__Impl
	rule__FilterSpec__Group_19__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__Group_19__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getLogPrefixKeyword_19_0()); }

	'--log-prefix' 

{ after(grammarAccess.getFilterSpecAccess().getLogPrefixKeyword_19_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FilterSpec__Group_19__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FilterSpec__Group_19__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__Group_19__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getLpAssignment_19_1()); }
(rule__FilterSpec__LpAssignment_19_1)
{ after(grammarAccess.getFilterSpecAccess().getLpAssignment_19_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ChainDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ChainDeclaration__Group__0__Impl
	rule__ChainDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ChainDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChainDeclarationAccess().getIptablesKeyword_0()); }

	'iptables' 

{ after(grammarAccess.getChainDeclarationAccess().getIptablesKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ChainDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ChainDeclaration__Group__1__Impl
	rule__ChainDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ChainDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChainDeclarationAccess().getNKeyword_1()); }

	'-N' 

{ after(grammarAccess.getChainDeclarationAccess().getNKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ChainDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ChainDeclaration__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ChainDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChainDeclarationAccess().getChainNameParserRuleCall_2()); }
	ruleChainName
{ after(grammarAccess.getChainDeclarationAccess().getChainNameParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__IPExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IPExpr__Group__0__Impl
	rule__IPExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IPExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIPExprAccess().getIpByteExprParserRuleCall_0()); }
	ruleipByteExpr
{ after(grammarAccess.getIPExprAccess().getIpByteExprParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IPExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IPExpr__Group__1__Impl
	rule__IPExpr__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IPExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIPExprAccess().getFullStopKeyword_1()); }

	'.' 

{ after(grammarAccess.getIPExprAccess().getFullStopKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IPExpr__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IPExpr__Group__2__Impl
	rule__IPExpr__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IPExpr__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIPExprAccess().getIpByteExprParserRuleCall_2()); }
	ruleipByteExpr
{ after(grammarAccess.getIPExprAccess().getIpByteExprParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IPExpr__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IPExpr__Group__3__Impl
	rule__IPExpr__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IPExpr__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIPExprAccess().getFullStopKeyword_3()); }

	'.' 

{ after(grammarAccess.getIPExprAccess().getFullStopKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IPExpr__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IPExpr__Group__4__Impl
	rule__IPExpr__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IPExpr__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIPExprAccess().getIpByteExprParserRuleCall_4()); }
	ruleipByteExpr
{ after(grammarAccess.getIPExprAccess().getIpByteExprParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IPExpr__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IPExpr__Group__5__Impl
	rule__IPExpr__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__IPExpr__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIPExprAccess().getFullStopKeyword_5()); }

	'.' 

{ after(grammarAccess.getIPExprAccess().getFullStopKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IPExpr__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IPExpr__Group__6__Impl
	rule__IPExpr__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__IPExpr__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIPExprAccess().getIpByteExprParserRuleCall_6()); }
	ruleipByteExpr
{ after(grammarAccess.getIPExprAccess().getIpByteExprParserRuleCall_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IPExpr__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IPExpr__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IPExpr__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIPExprAccess().getIpRangeExprParserRuleCall_7()); }
(	ruleIpRangeExpr)?
{ after(grammarAccess.getIPExprAccess().getIpRangeExprParserRuleCall_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__IpRangeExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IpRangeExpr__Group__0__Impl
	rule__IpRangeExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IpRangeExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIpRangeExprAccess().getSolidusKeyword_0()); }

	'/' 

{ after(grammarAccess.getIpRangeExprAccess().getSolidusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IpRangeExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IpRangeExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IpRangeExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIpRangeExprAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
{ after(grammarAccess.getIpRangeExprAccess().getINTTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Model__RulesAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getRulesRuleParserRuleCall_0()); }
	ruleRule{ after(grammarAccess.getModelAccess().getRulesRuleParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__DeclarationAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getDeclarationChainDeclarationParserRuleCall_0_0()); }
	ruleChainDeclaration{ after(grammarAccess.getRuleAccess().getDeclarationChainDeclarationParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__FilterAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getFilterFilterDeclarationParserRuleCall_1_0()); }
	ruleFilterDeclaration{ after(grammarAccess.getRuleAccess().getFilterFilterDeclarationParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FilterDeclaration__FilterAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterDeclarationAccess().getFilterFilteringSpecParserRuleCall_0()); }
	ruleFilteringSpec{ after(grammarAccess.getFilterDeclarationAccess().getFilterFilteringSpecParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__OptionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getOptionAlternatives_1_0()); }
(rule__FilterSpec__OptionAlternatives_1_0)
{ after(grammarAccess.getFilterSpecAccess().getOptionAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__ChainAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getChainChainParserRuleCall_2_0()); }
	ruleChain{ after(grammarAccess.getFilterSpecAccess().getChainChainParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__ProtocolAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getProtocolProtocolParserRuleCall_3_1_0()); }
	ruleProtocol{ after(grammarAccess.getFilterSpecAccess().getProtocolProtocolParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__IpAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getIpIPExprParserRuleCall_4_1_0()); }
	ruleIPExpr{ after(grammarAccess.getFilterSpecAccess().getIpIPExprParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__InterfaceAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getInterfaceInterfaceParserRuleCall_5_1_0()); }
	ruleInterface{ after(grammarAccess.getFilterSpecAccess().getInterfaceInterfaceParserRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__IpDstAssignment_6_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getIpDstIPExprParserRuleCall_6_1_0()); }
	ruleIPExpr{ after(grammarAccess.getFilterSpecAccess().getIpDstIPExprParserRuleCall_6_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__SourcePortAssignment_7_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getSourcePortINTTerminalRuleCall_7_1_0()); }
	RULE_INT{ after(grammarAccess.getFilterSpecAccess().getSourcePortINTTerminalRuleCall_7_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__DestinationPortAssignment_8_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getDestinationPortINTTerminalRuleCall_8_1_0()); }
	RULE_INT{ after(grammarAccess.getFilterSpecAccess().getDestinationPortINTTerminalRuleCall_8_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__NegAssignment_9
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getNegExclamationMarkKeyword_9_0()); }
(
{ before(grammarAccess.getFilterSpecAccess().getNegExclamationMarkKeyword_9_0()); }

	'!' 

{ after(grammarAccess.getFilterSpecAccess().getNegExclamationMarkKeyword_9_0()); }
)

{ after(grammarAccess.getFilterSpecAccess().getNegExclamationMarkKeyword_9_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__SynAssignment_10
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getSynSynKeyword_10_0()); }
(
{ before(grammarAccess.getFilterSpecAccess().getSynSynKeyword_10_0()); }

	'--syn' 

{ after(grammarAccess.getFilterSpecAccess().getSynSynKeyword_10_0()); }
)

{ after(grammarAccess.getFilterSpecAccess().getSynSynKeyword_10_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__MatchesAssignment_11_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getMatchesMatchParserRuleCall_11_1_0()); }
	ruleMatch{ after(grammarAccess.getFilterSpecAccess().getMatchesMatchParserRuleCall_11_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__StatesAssignment_12_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getStatesStateParserRuleCall_12_1_0()); }
	ruleState{ after(grammarAccess.getFilterSpecAccess().getStatesStateParserRuleCall_12_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__StatesAssignment_12_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getStatesStateParserRuleCall_12_2_1_0()); }
	ruleState{ after(grammarAccess.getFilterSpecAccess().getStatesStateParserRuleCall_12_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__DirAssignment_13_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getDirDirParserRuleCall_13_1_0()); }
	ruleDir{ after(grammarAccess.getFilterSpecAccess().getDirDirParserRuleCall_13_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__StatusAssignment_14_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getStatusStatusParserRuleCall_14_1_0()); }
	ruleStatus{ after(grammarAccess.getFilterSpecAccess().getStatusStatusParserRuleCall_14_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__StatesAssignment_15_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getStatesStateParserRuleCall_15_1_0()); }
	ruleState{ after(grammarAccess.getFilterSpecAccess().getStatesStateParserRuleCall_15_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__StatesAssignment_15_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getStatesStateParserRuleCall_15_2_1_0()); }
	ruleState{ after(grammarAccess.getFilterSpecAccess().getStatesStateParserRuleCall_15_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__ExamFlagsAssignment_16_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getExamFlagsTCPFlagParserRuleCall_16_1_0()); }
	ruleTCPFlag{ after(grammarAccess.getFilterSpecAccess().getExamFlagsTCPFlagParserRuleCall_16_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__ExamFlagsAssignment_16_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getExamFlagsTCPFlagParserRuleCall_16_2_1_0()); }
	ruleTCPFlag{ after(grammarAccess.getFilterSpecAccess().getExamFlagsTCPFlagParserRuleCall_16_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__FlagsAssignment_16_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getFlagsTCPFlagParserRuleCall_16_3_0()); }
	ruleTCPFlag{ after(grammarAccess.getFilterSpecAccess().getFlagsTCPFlagParserRuleCall_16_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__FlagsAssignment_16_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getFlagsTCPFlagParserRuleCall_16_4_1_0()); }
	ruleTCPFlag{ after(grammarAccess.getFilterSpecAccess().getFlagsTCPFlagParserRuleCall_16_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__TargetAssignment_18
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getTargetTargetParserRuleCall_18_0()); }
	ruleTarget{ after(grammarAccess.getFilterSpecAccess().getTargetTargetParserRuleCall_18_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FilterSpec__LpAssignment_19_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterSpecAccess().getLpLPParserRuleCall_19_1_0()); }
	ruleLP{ after(grammarAccess.getFilterSpecAccess().getLpLPParserRuleCall_19_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceAccess().getNameIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getInterfaceAccess().getNameIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LP__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLPAccess().getNameSTRINGTerminalRuleCall_0()); }
	RULE_STRING{ after(grammarAccess.getLPAccess().getNameSTRINGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Match__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMatchAccess().getNameAlternatives_0()); }
(rule__Match__NameAlternatives_0)
{ after(grammarAccess.getMatchAccess().getNameAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__State__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getNameAlternatives_0()); }
(rule__State__NameAlternatives_0)
{ after(grammarAccess.getStateAccess().getNameAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TCPFlag__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTCPFlagAccess().getNameAlternatives_0()); }
(rule__TCPFlag__NameAlternatives_0)
{ after(grammarAccess.getTCPFlagAccess().getNameAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Chain__ChainNameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChainAccess().getChainNameIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getChainAccess().getChainNameIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ChainName__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChainNameAccess().getNameIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getChainNameAccess().getNameIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


